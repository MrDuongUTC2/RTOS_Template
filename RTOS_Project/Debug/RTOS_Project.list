
RTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800403c  0800403c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004044  08004044  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004044  08004044  00014044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800404c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012d9c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012db0  20012db0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c137  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e35  00000000  00000000  0002c17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002dfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000980  00000000  00000000  0002e9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021352  00000000  00000000  0002f368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c463  00000000  00000000  000506ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cac1a  00000000  00000000  0005cb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127737  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002918  00000000  00000000  00127788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fbc 	.word	0x08003fbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08003fbc 	.word	0x08003fbc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fa09 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f853 	bl	8000588 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8d9 	bl	8000698 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f8ad 	bl	8000644 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <main+0x90>)
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2302      	movs	r3, #2
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <main+0x94>)
 80004f4:	22c8      	movs	r2, #200	; 0xc8
 80004f6:	491d      	ldr	r1, [pc, #116]	; (800056c <main+0x98>)
 80004f8:	481d      	ldr	r0, [pc, #116]	; (8000570 <main+0x9c>)
 80004fa:	f002 f943 	bl	8002784 <xTaskCreate>
 80004fe:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d00a      	beq.n	800051c <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800050a:	f383 8811 	msr	BASEPRI, r3
 800050e:	f3bf 8f6f 	isb	sy
 8000512:	f3bf 8f4f 	dsb	sy
 8000516:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000518:	bf00      	nop
 800051a:	e7fe      	b.n	800051a <main+0x46>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <main+0xa0>)
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2302      	movs	r3, #2
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <main+0xa4>)
 8000526:	22c8      	movs	r2, #200	; 0xc8
 8000528:	4914      	ldr	r1, [pc, #80]	; (800057c <main+0xa8>)
 800052a:	4815      	ldr	r0, [pc, #84]	; (8000580 <main+0xac>)
 800052c:	f002 f92a 	bl	8002784 <xTaskCreate>
 8000530:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d00a      	beq.n	800054e <main+0x7a>
        __asm volatile
 8000538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800053c:	f383 8811 	msr	BASEPRI, r3
 8000540:	f3bf 8f6f 	isb	sy
 8000544:	f3bf 8f4f 	dsb	sy
 8000548:	607b      	str	r3, [r7, #4]
    }
 800054a:	bf00      	nop
 800054c:	e7fe      	b.n	800054c <main+0x78>

  xQueue1 = xQueueCreate(5, sizeof(uint8_t) );
 800054e:	2200      	movs	r2, #0
 8000550:	2101      	movs	r1, #1
 8000552:	2005      	movs	r0, #5
 8000554:	f001 fde6 	bl	8002124 <xQueueGenericCreate>
 8000558:	4603      	mov	r3, r0
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <main+0xb0>)
 800055c:	6013      	str	r3, [r2, #0]

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800055e:	f002 fac1 	bl	8002ae4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x8e>
 8000564:	20000074 	.word	0x20000074
 8000568:	08003fd4 	.word	0x08003fd4
 800056c:	08003fec 	.word	0x08003fec
 8000570:	080006e9 	.word	0x080006e9
 8000574:	20000078 	.word	0x20000078
 8000578:	08003ff4 	.word	0x08003ff4
 800057c:	0800400c 	.word	0x0800400c
 8000580:	08000729 	.word	0x08000729
 8000584:	2000007c 	.word	0x2000007c

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fd08 	bl	8003fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xb4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xb4>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xb4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <SystemClock_Config+0xb8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <SystemClock_Config+0xb8>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <SystemClock_Config+0xb8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fc59 	bl	8000eb0 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000604:	f000 f8ac 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 febc 	bl	80013a0 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800062e:	f000 f897 	bl	8000760 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_USART2_UART_Init+0x50>)
 800064c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART2_UART_Init+0x4c>)
 800067c:	f001 f870 	bl	8001760 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000686:	f000 f86b 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000030 	.word	0x20000030
 8000694:	40004400 	.word	0x40004400

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_GPIO_Init+0x4c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <MX_GPIO_Init+0x4c>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_GPIO_Init+0x4c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_GPIO_Init+0x4c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <MX_GPIO_Init+0x4c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_GPIO_Init+0x4c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <task1_handler>:

/* USER CODE BEGIN 4 */

void task1_handler(void* parameters)
{	uint8_t data = 0x30;
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	2330      	movs	r3, #48	; 0x30
 80006f2:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
			xQueueSend( xQueue1 , &data , portMAX_DELAY );
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <task1_handler+0x38>)
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	f107 010f 	add.w	r1, r7, #15
 80006fc:	2300      	movs	r3, #0
 80006fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000702:	f001 fd81 	bl	8002208 <xQueueGenericSend>
			HAL_UART_Transmit(&huart2, &data , 1 , 10);
 8000706:	f107 010f 	add.w	r1, r7, #15
 800070a:	230a      	movs	r3, #10
 800070c:	2201      	movs	r2, #1
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <task1_handler+0x3c>)
 8000710:	f001 f873 	bl	80017fa <HAL_UART_Transmit>
			vTaskDelay( pdMS_TO_TICKS( 500 ) );
 8000714:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000718:	f002 f9b0 	bl	8002a7c <vTaskDelay>
			xQueueSend( xQueue1 , &data , portMAX_DELAY );
 800071c:	e7ea      	b.n	80006f4 <task1_handler+0xc>
 800071e:	bf00      	nop
 8000720:	2000007c 	.word	0x2000007c
 8000724:	20000030 	.word	0x20000030

08000728 <task2_handler>:

}


void task2_handler(void* parameters)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint8_t buffer[5];
		xQueueReceive( xQueue1 , buffer, portMAX_DELAY );
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <task2_handler+0x2c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f107 0108 	add.w	r1, r7, #8
 8000738:	f04f 32ff 	mov.w	r2, #4294967295
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fe49 	bl	80023d4 <xQueueReceive>
		HAL_UART_Transmit(&huart2, "done" , 4 , HAL_MAX_DELAY);
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	2204      	movs	r2, #4
 8000748:	4903      	ldr	r1, [pc, #12]	; (8000758 <task2_handler+0x30>)
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <task2_handler+0x34>)
 800074c:	f001 f855 	bl	80017fa <HAL_UART_Transmit>
	{
 8000750:	e7ee      	b.n	8000730 <task2_handler+0x8>
 8000752:	bf00      	nop
 8000754:	2000007c 	.word	0x2000007c
 8000758:	08004014 	.word	0x08004014
 800075c:	20000030 	.word	0x20000030

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <HAL_MspInit+0x4c>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <HAL_UART_MspInit+0x84>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12b      	bne.n	8000836 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_UART_MspInit+0x88>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_UART_MspInit+0x88>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_UART_MspInit+0x88>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_UART_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a10      	ldr	r2, [pc, #64]	; (8000844 <HAL_UART_MspInit+0x88>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_UART_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000816:	230c      	movs	r3, #12
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000826:	2307      	movs	r3, #7
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <HAL_UART_MspInit+0x8c>)
 8000832:	f000 f9a1 	bl	8000b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40004400 	.word	0x40004400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008a2:	490e      	ldr	r1, [pc, #56]	; (80008dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008b8:	4c0b      	ldr	r4, [pc, #44]	; (80008e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008c6:	f7ff ffd7 	bl	8000878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f003 fb3d 	bl	8003f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ce:	f7ff fe01 	bl	80004d4 <main>
  bx  lr    
 80008d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008e0:	0800404c 	.word	0x0800404c
  ldr r2, =_sbss
 80008e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008e8:	20012db0 	.word	0x20012db0

080008ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_Init+0x40>)
 80008fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_Init+0x40>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x40>)
 8000912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f8f9 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	200f      	movs	r0, #15
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff ff22 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023c00 	.word	0x40023c00

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f903 	bl	8000b5e <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f8d9 	bl	8000b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000080 	.word	0x20000080

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000adc:	d301      	bcc.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00f      	b.n	8000b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <SysTick_Config+0x40>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	210f      	movs	r1, #15
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f7ff ff8e 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SysTick_Config+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SysTick_Config+0x40>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff47 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff5c 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff8e 	bl	8000a64 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5d 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffb0 	bl	8000acc <SysTick_Config>
 8000b6c:	4603      	mov	r3, r0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	e16b      	b.n	8000e6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b94:	2201      	movs	r2, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	f040 815a 	bne.w	8000e66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d005      	beq.n	8000bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d130      	bne.n	8000c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4013      	ands	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c00:	2201      	movs	r2, #1
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	091b      	lsrs	r3, r3, #4
 8000c16:	f003 0201 	and.w	r2, r3, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d017      	beq.n	8000c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d123      	bne.n	8000cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	08da      	lsrs	r2, r3, #3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	220f      	movs	r2, #15
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	08da      	lsrs	r2, r3, #3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	69b9      	ldr	r1, [r7, #24]
 8000cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0203 	and.w	r2, r3, #3
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 80b4 	beq.w	8000e66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b60      	ldr	r3, [pc, #384]	; (8000e84 <HAL_GPIO_Init+0x30c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a5f      	ldr	r2, [pc, #380]	; (8000e84 <HAL_GPIO_Init+0x30c>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b5d      	ldr	r3, [pc, #372]	; (8000e84 <HAL_GPIO_Init+0x30c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d1a:	4a5b      	ldr	r2, [pc, #364]	; (8000e88 <HAL_GPIO_Init+0x310>)
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3302      	adds	r3, #2
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a52      	ldr	r2, [pc, #328]	; (8000e8c <HAL_GPIO_Init+0x314>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d02b      	beq.n	8000d9e <HAL_GPIO_Init+0x226>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a51      	ldr	r2, [pc, #324]	; (8000e90 <HAL_GPIO_Init+0x318>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d025      	beq.n	8000d9a <HAL_GPIO_Init+0x222>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a50      	ldr	r2, [pc, #320]	; (8000e94 <HAL_GPIO_Init+0x31c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d01f      	beq.n	8000d96 <HAL_GPIO_Init+0x21e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4f      	ldr	r2, [pc, #316]	; (8000e98 <HAL_GPIO_Init+0x320>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d019      	beq.n	8000d92 <HAL_GPIO_Init+0x21a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4e      	ldr	r2, [pc, #312]	; (8000e9c <HAL_GPIO_Init+0x324>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_GPIO_Init+0x216>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4d      	ldr	r2, [pc, #308]	; (8000ea0 <HAL_GPIO_Init+0x328>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00d      	beq.n	8000d8a <HAL_GPIO_Init+0x212>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4c      	ldr	r2, [pc, #304]	; (8000ea4 <HAL_GPIO_Init+0x32c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d007      	beq.n	8000d86 <HAL_GPIO_Init+0x20e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <HAL_GPIO_Init+0x330>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_GPIO_Init+0x20a>
 8000d7e:	2307      	movs	r3, #7
 8000d80:	e00e      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d82:	2308      	movs	r3, #8
 8000d84:	e00c      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d86:	2306      	movs	r3, #6
 8000d88:	e00a      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	e008      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d92:	2303      	movs	r3, #3
 8000d94:	e004      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x228>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	69fa      	ldr	r2, [r7, #28]
 8000da2:	f002 0203 	and.w	r2, r2, #3
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	4093      	lsls	r3, r2
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db0:	4935      	ldr	r1, [pc, #212]	; (8000e88 <HAL_GPIO_Init+0x310>)
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3302      	adds	r3, #2
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000de2:	4a32      	ldr	r2, [pc, #200]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e0c:	4a27      	ldr	r2, [pc, #156]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e36:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e60:	4a12      	ldr	r2, [pc, #72]	; (8000eac <HAL_GPIO_Init+0x334>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	f67f ae90 	bls.w	8000b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40013800 	.word	0x40013800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40020800 	.word	0x40020800
 8000e98:	40020c00 	.word	0x40020c00
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40021400 	.word	0x40021400
 8000ea4:	40021800 	.word	0x40021800
 8000ea8:	40021c00 	.word	0x40021c00
 8000eac:	40013c00 	.word	0x40013c00

08000eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e267      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d075      	beq.n	8000fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ece:	4b88      	ldr	r3, [pc, #544]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d00c      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eda:	4b85      	ldr	r3, [pc, #532]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d112      	bne.n	8000f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ee6:	4b82      	ldr	r3, [pc, #520]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ef2:	d10b      	bne.n	8000f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef4:	4b7e      	ldr	r3, [pc, #504]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d05b      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x108>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d157      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e242      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f14:	d106      	bne.n	8000f24 <HAL_RCC_OscConfig+0x74>
 8000f16:	4b76      	ldr	r3, [pc, #472]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a75      	ldr	r2, [pc, #468]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e01d      	b.n	8000f60 <HAL_RCC_OscConfig+0xb0>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x98>
 8000f2e:	4b70      	ldr	r3, [pc, #448]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a6f      	ldr	r2, [pc, #444]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b6d      	ldr	r3, [pc, #436]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6c      	ldr	r2, [pc, #432]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0xb0>
 8000f48:	4b69      	ldr	r3, [pc, #420]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a68      	ldr	r2, [pc, #416]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b66      	ldr	r3, [pc, #408]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a65      	ldr	r2, [pc, #404]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fd14 	bl	8000994 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fd10 	bl	8000994 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	; 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e207      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	4b5b      	ldr	r3, [pc, #364]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0xc0>
 8000f8e:	e014      	b.n	8000fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fd00 	bl	8000994 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fcfc 	bl	8000994 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e1f3      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	4b51      	ldr	r3, [pc, #324]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0xe8>
 8000fb6:	e000      	b.n	8000fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d063      	beq.n	800108e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fc6:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d11c      	bne.n	8001018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fde:	4b44      	ldr	r3, [pc, #272]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d116      	bne.n	8001018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_RCC_OscConfig+0x152>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d001      	beq.n	8001002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e1c7      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4937      	ldr	r1, [pc, #220]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	e03a      	b.n	800108e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001020:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <HAL_RCC_OscConfig+0x244>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001026:	f7ff fcb5 	bl	8000994 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff fcb1 	bl	8000994 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e1a8      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4925      	ldr	r1, [pc, #148]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_RCC_OscConfig+0x244>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001068:	f7ff fc94 	bl	8000994 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fc90 	bl	8000994 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e187      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d036      	beq.n	8001108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d016      	beq.n	80010d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_RCC_OscConfig+0x248>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a8:	f7ff fc74 	bl	8000994 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff fc70 	bl	8000994 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e167      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_RCC_OscConfig+0x240>)
 80010c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x200>
 80010ce:	e01b      	b.n	8001108 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_RCC_OscConfig+0x248>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fc5d 	bl	8000994 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010dc:	e00e      	b.n	80010fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010de:	f7ff fc59 	bl	8000994 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d907      	bls.n	80010fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e150      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
 80010f0:	40023800 	.word	0x40023800
 80010f4:	42470000 	.word	0x42470000
 80010f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fc:	4b88      	ldr	r3, [pc, #544]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80010fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1ea      	bne.n	80010de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 8097 	beq.w	8001244 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111a:	4b81      	ldr	r3, [pc, #516]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10f      	bne.n	8001146 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4b7d      	ldr	r3, [pc, #500]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a7c      	ldr	r2, [pc, #496]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b7a      	ldr	r3, [pc, #488]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001142:	2301      	movs	r3, #1
 8001144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001146:	4b77      	ldr	r3, [pc, #476]	; (8001324 <HAL_RCC_OscConfig+0x474>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d118      	bne.n	8001184 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001152:	4b74      	ldr	r3, [pc, #464]	; (8001324 <HAL_RCC_OscConfig+0x474>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a73      	ldr	r2, [pc, #460]	; (8001324 <HAL_RCC_OscConfig+0x474>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115e:	f7ff fc19 	bl	8000994 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001166:	f7ff fc15 	bl	8000994 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e10c      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	4b6a      	ldr	r3, [pc, #424]	; (8001324 <HAL_RCC_OscConfig+0x474>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x2ea>
 800118c:	4b64      	ldr	r3, [pc, #400]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 800118e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001190:	4a63      	ldr	r2, [pc, #396]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6713      	str	r3, [r2, #112]	; 0x70
 8001198:	e01c      	b.n	80011d4 <HAL_RCC_OscConfig+0x324>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x30c>
 80011a2:	4b5f      	ldr	r3, [pc, #380]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80011a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a6:	4a5e      	ldr	r2, [pc, #376]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6713      	str	r3, [r2, #112]	; 0x70
 80011ae:	4b5c      	ldr	r3, [pc, #368]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80011b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b2:	4a5b      	ldr	r2, [pc, #364]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6713      	str	r3, [r2, #112]	; 0x70
 80011ba:	e00b      	b.n	80011d4 <HAL_RCC_OscConfig+0x324>
 80011bc:	4b58      	ldr	r3, [pc, #352]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80011be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c0:	4a57      	ldr	r2, [pc, #348]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	6713      	str	r3, [r2, #112]	; 0x70
 80011c8:	4b55      	ldr	r3, [pc, #340]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80011ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011cc:	4a54      	ldr	r2, [pc, #336]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80011ce:	f023 0304 	bic.w	r3, r3, #4
 80011d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d015      	beq.n	8001208 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011dc:	f7ff fbda 	bl	8000994 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e2:	e00a      	b.n	80011fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e4:	f7ff fbd6 	bl	8000994 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e0cb      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fa:	4b49      	ldr	r3, [pc, #292]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0ee      	beq.n	80011e4 <HAL_RCC_OscConfig+0x334>
 8001206:	e014      	b.n	8001232 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001208:	f7ff fbc4 	bl	8000994 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120e:	e00a      	b.n	8001226 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001210:	f7ff fbc0 	bl	8000994 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f241 3288 	movw	r2, #5000	; 0x1388
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e0b5      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001226:	4b3e      	ldr	r3, [pc, #248]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 8001228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1ee      	bne.n	8001210 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001232:	7dfb      	ldrb	r3, [r7, #23]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d105      	bne.n	8001244 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001238:	4b39      	ldr	r3, [pc, #228]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a38      	ldr	r2, [pc, #224]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 800123e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80a1 	beq.w	8001390 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800124e:	4b34      	ldr	r3, [pc, #208]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b08      	cmp	r3, #8
 8001258:	d05c      	beq.n	8001314 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d141      	bne.n	80012e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001262:	4b31      	ldr	r3, [pc, #196]	; (8001328 <HAL_RCC_OscConfig+0x478>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fb94 	bl	8000994 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff fb90 	bl	8000994 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e087      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69da      	ldr	r2, [r3, #28]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	019b      	lsls	r3, r3, #6
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	3b01      	subs	r3, #1
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	061b      	lsls	r3, r3, #24
 80012b2:	491b      	ldr	r1, [pc, #108]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_RCC_OscConfig+0x478>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff fb69 	bl	8000994 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c6:	f7ff fb65 	bl	8000994 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e05c      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x416>
 80012e4:	e054      	b.n	8001390 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_RCC_OscConfig+0x478>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fb52 	bl	8000994 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f4:	f7ff fb4e 	bl	8000994 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e045      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_RCC_OscConfig+0x470>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x444>
 8001312:	e03d      	b.n	8001390 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d107      	bne.n	800132c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e038      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
 8001320:	40023800 	.word	0x40023800
 8001324:	40007000 	.word	0x40007000
 8001328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_RCC_OscConfig+0x4ec>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d028      	beq.n	800138c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001344:	429a      	cmp	r2, r3
 8001346:	d121      	bne.n	800138c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001352:	429a      	cmp	r2, r3
 8001354:	d11a      	bne.n	800138c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800135c:	4013      	ands	r3, r2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001364:	4293      	cmp	r3, r2
 8001366:	d111      	bne.n	800138c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	3b01      	subs	r3, #1
 8001376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d107      	bne.n	800138c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0cc      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d90c      	bls.n	80013dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b65      	ldr	r3, [pc, #404]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ca:	4b63      	ldr	r3, [pc, #396]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0b8      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d020      	beq.n	800142a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f4:	4b59      	ldr	r3, [pc, #356]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a52      	ldr	r2, [pc, #328]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001418:	4b50      	ldr	r3, [pc, #320]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	494d      	ldr	r1, [pc, #308]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	4313      	orrs	r3, r2
 8001428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d044      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d119      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e07f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d003      	beq.n	800145e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145a:	2b03      	cmp	r3, #3
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145e:	4b3f      	ldr	r3, [pc, #252]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e067      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f023 0203 	bic.w	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4934      	ldr	r1, [pc, #208]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	4313      	orrs	r3, r2
 800148e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001490:	f7ff fa80 	bl	8000994 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	e00a      	b.n	80014ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001498:	f7ff fa7c 	bl	8000994 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e04f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 020c 	and.w	r2, r3, #12
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	429a      	cmp	r2, r3
 80014be:	d1eb      	bne.n	8001498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d20c      	bcs.n	80014e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e032      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4916      	ldr	r1, [pc, #88]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	490e      	ldr	r1, [pc, #56]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001526:	f000 f821 	bl	800156c <HAL_RCC_GetSysClockFreq>
 800152a:	4602      	mov	r2, r0
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	490a      	ldr	r1, [pc, #40]	; (8001560 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	5ccb      	ldrb	r3, [r1, r3]
 800153a:	fa22 f303 	lsr.w	r3, r2, r3
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1c8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f9f4 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00
 800155c:	40023800 	.word	0x40023800
 8001560:	08004024 	.word	0x08004024
 8001564:	20000000 	.word	0x20000000
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800156c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001570:	b090      	sub	sp, #64	; 0x40
 8001572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
 8001578:	2300      	movs	r3, #0
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800157c:	2300      	movs	r3, #0
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <HAL_RCC_GetSysClockFreq+0x180>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b08      	cmp	r3, #8
 800158e:	d00d      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x40>
 8001590:	2b08      	cmp	r3, #8
 8001592:	f200 80a1 	bhi.w	80016d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x34>
 800159a:	2b04      	cmp	r3, #4
 800159c:	d003      	beq.n	80015a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800159e:	e09b      	b.n	80016d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80015a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80015a4:	e09b      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015a6:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015aa:	e098      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ac:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <HAL_RCC_GetSysClockFreq+0x180>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b6:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <HAL_RCC_GetSysClockFreq+0x180>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d028      	beq.n	8001614 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_RCC_GetSysClockFreq+0x180>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	099b      	lsrs	r3, r3, #6
 80015c8:	2200      	movs	r2, #0
 80015ca:	623b      	str	r3, [r7, #32]
 80015cc:	627a      	str	r2, [r7, #36]	; 0x24
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015d4:	2100      	movs	r1, #0
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80015d8:	fb03 f201 	mul.w	r2, r3, r1
 80015dc:	2300      	movs	r3, #0
 80015de:	fb00 f303 	mul.w	r3, r0, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	4a43      	ldr	r2, [pc, #268]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80015e6:	fba0 1202 	umull	r1, r2, r0, r2
 80015ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015ec:	460a      	mov	r2, r1
 80015ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80015f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f2:	4413      	add	r3, r2
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f8:	2200      	movs	r2, #0
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	61fa      	str	r2, [r7, #28]
 80015fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001602:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001606:	f7fe fde3 	bl	80001d0 <__aeabi_uldivmod>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4613      	mov	r3, r2
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001612:	e053      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001614:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_RCC_GetSysClockFreq+0x180>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	2200      	movs	r2, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	617a      	str	r2, [r7, #20]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001626:	f04f 0b00 	mov.w	fp, #0
 800162a:	4652      	mov	r2, sl
 800162c:	465b      	mov	r3, fp
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	0159      	lsls	r1, r3, #5
 8001638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800163c:	0150      	lsls	r0, r2, #5
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ebb2 080a 	subs.w	r8, r2, sl
 8001646:	eb63 090b 	sbc.w	r9, r3, fp
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001656:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800165a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800165e:	ebb2 0408 	subs.w	r4, r2, r8
 8001662:	eb63 0509 	sbc.w	r5, r3, r9
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	00eb      	lsls	r3, r5, #3
 8001670:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001674:	00e2      	lsls	r2, r4, #3
 8001676:	4614      	mov	r4, r2
 8001678:	461d      	mov	r5, r3
 800167a:	eb14 030a 	adds.w	r3, r4, sl
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	eb45 030b 	adc.w	r3, r5, fp
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001692:	4629      	mov	r1, r5
 8001694:	028b      	lsls	r3, r1, #10
 8001696:	4621      	mov	r1, r4
 8001698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800169c:	4621      	mov	r1, r4
 800169e:	028a      	lsls	r2, r1, #10
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a6:	2200      	movs	r2, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	60fa      	str	r2, [r7, #12]
 80016ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016b0:	f7fe fd8e 	bl	80001d0 <__aeabi_uldivmod>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4613      	mov	r3, r2
 80016ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_GetSysClockFreq+0x180>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	3301      	adds	r3, #1
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80016cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016d6:	e002      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80016da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3740      	adds	r7, #64	; 0x40
 80016e4:	46bd      	mov	sp, r7
 80016e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	00f42400 	.word	0x00f42400
 80016f4:	017d7840 	.word	0x017d7840

080016f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_RCC_GetHCLKFreq+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000000 	.word	0x20000000

08001710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001714:	f7ff fff0 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	0a9b      	lsrs	r3, r3, #10
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	4903      	ldr	r1, [pc, #12]	; (8001734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	08004034 	.word	0x08004034

08001738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800173c:	f7ff ffdc 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 8001740:	4602      	mov	r2, r0
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	0b5b      	lsrs	r3, r3, #13
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	4903      	ldr	r1, [pc, #12]	; (800175c <HAL_RCC_GetPCLK2Freq+0x24>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	08004034 	.word	0x08004034

08001760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e03f      	b.n	80017f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff f818 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2224      	movs	r2, #36	; 0x24
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f929 	bl	80019fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2220      	movs	r2, #32
 80017ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b08a      	sub	sp, #40	; 0x28
 80017fe:	af02      	add	r7, sp, #8
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4613      	mov	r3, r2
 8001808:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b20      	cmp	r3, #32
 8001818:	d17c      	bne.n	8001914 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <HAL_UART_Transmit+0x2c>
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e075      	b.n	8001916 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_UART_Transmit+0x3e>
 8001834:	2302      	movs	r3, #2
 8001836:	e06e      	b.n	8001916 <HAL_UART_Transmit+0x11c>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2221      	movs	r2, #33	; 0x21
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800184e:	f7ff f8a1 	bl	8000994 <HAL_GetTick>
 8001852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	88fa      	ldrh	r2, [r7, #6]
 8001858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	88fa      	ldrh	r2, [r7, #6]
 800185e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001868:	d108      	bne.n	800187c <HAL_UART_Transmit+0x82>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d104      	bne.n	800187c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	e003      	b.n	8001884 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800188c:	e02a      	b.n	80018e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2200      	movs	r2, #0
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f840 	bl	800191e <UART_WaitOnFlagUntilTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e036      	b.n	8001916 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10b      	bne.n	80018c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	3302      	adds	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	e007      	b.n	80018d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	3301      	adds	r3, #1
 80018d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1cf      	bne.n	800188e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2200      	movs	r2, #0
 80018f6:	2140      	movs	r1, #64	; 0x40
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f810 	bl	800191e <UART_WaitOnFlagUntilTimeout>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e006      	b.n	8001916 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2220      	movs	r2, #32
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	e000      	b.n	8001916 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001914:	2302      	movs	r3, #2
  }
}
 8001916:	4618      	mov	r0, r3
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b090      	sub	sp, #64	; 0x40
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4613      	mov	r3, r2
 800192c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800192e:	e050      	b.n	80019d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001936:	d04c      	beq.n	80019d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <UART_WaitOnFlagUntilTimeout+0x30>
 800193e:	f7ff f829 	bl	8000994 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800194a:	429a      	cmp	r2, r3
 800194c:	d241      	bcs.n	80019d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	330c      	adds	r3, #12
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001958:	e853 3f00 	ldrex	r3, [r3]
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	330c      	adds	r3, #12
 800196c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800196e:	637a      	str	r2, [r7, #52]	; 0x34
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001976:	e841 2300 	strex	r3, r2, [r1]
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1e5      	bne.n	800194e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	3314      	adds	r3, #20
 8001988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	e853 3f00 	ldrex	r3, [r3]
 8001990:	613b      	str	r3, [r7, #16]
   return(result);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	63bb      	str	r3, [r7, #56]	; 0x38
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3314      	adds	r3, #20
 80019a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019a2:	623a      	str	r2, [r7, #32]
 80019a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019a6:	69f9      	ldr	r1, [r7, #28]
 80019a8:	6a3a      	ldr	r2, [r7, #32]
 80019aa:	e841 2300 	strex	r3, r2, [r1]
 80019ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1e5      	bne.n	8001982 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2220      	movs	r2, #32
 80019ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e00f      	b.n	80019f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4013      	ands	r3, r2
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	429a      	cmp	r2, r3
 80019e0:	bf0c      	ite	eq
 80019e2:	2301      	moveq	r3, #1
 80019e4:	2300      	movne	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d09f      	beq.n	8001930 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3740      	adds	r7, #64	; 0x40
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a00:	b0c0      	sub	sp, #256	; 0x100
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a18:	68d9      	ldr	r1, [r3, #12]
 8001a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	ea40 0301 	orr.w	r3, r0, r1
 8001a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a54:	f021 010c 	bic.w	r1, r1, #12
 8001a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a62:	430b      	orrs	r3, r1
 8001a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a76:	6999      	ldr	r1, [r3, #24]
 8001a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	ea40 0301 	orr.w	r3, r0, r1
 8001a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b8f      	ldr	r3, [pc, #572]	; (8001cc8 <UART_SetConfig+0x2cc>)
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d005      	beq.n	8001a9c <UART_SetConfig+0xa0>
 8001a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b8d      	ldr	r3, [pc, #564]	; (8001ccc <UART_SetConfig+0x2d0>)
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d104      	bne.n	8001aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a9c:	f7ff fe4c 	bl	8001738 <HAL_RCC_GetPCLK2Freq>
 8001aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001aa4:	e003      	b.n	8001aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001aa6:	f7ff fe33 	bl	8001710 <HAL_RCC_GetPCLK1Freq>
 8001aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab8:	f040 810c 	bne.w	8001cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ace:	4622      	mov	r2, r4
 8001ad0:	462b      	mov	r3, r5
 8001ad2:	1891      	adds	r1, r2, r2
 8001ad4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ad6:	415b      	adcs	r3, r3
 8001ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ade:	4621      	mov	r1, r4
 8001ae0:	eb12 0801 	adds.w	r8, r2, r1
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	eb43 0901 	adc.w	r9, r3, r1
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001afe:	4690      	mov	r8, r2
 8001b00:	4699      	mov	r9, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	eb18 0303 	adds.w	r3, r8, r3
 8001b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b0c:	462b      	mov	r3, r5
 8001b0e:	eb49 0303 	adc.w	r3, r9, r3
 8001b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	18db      	adds	r3, r3, r3
 8001b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8001b30:	4613      	mov	r3, r2
 8001b32:	eb42 0303 	adc.w	r3, r2, r3
 8001b36:	657b      	str	r3, [r7, #84]	; 0x54
 8001b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b40:	f7fe fb46 	bl	80001d0 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <UART_SetConfig+0x2d4>)
 8001b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	011c      	lsls	r4, r3, #4
 8001b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b56:	2200      	movs	r2, #0
 8001b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001b64:	4642      	mov	r2, r8
 8001b66:	464b      	mov	r3, r9
 8001b68:	1891      	adds	r1, r2, r2
 8001b6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001b6c:	415b      	adcs	r3, r3
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b74:	4641      	mov	r1, r8
 8001b76:	eb12 0a01 	adds.w	sl, r2, r1
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b94:	4692      	mov	sl, r2
 8001b96:	469b      	mov	fp, r3
 8001b98:	4643      	mov	r3, r8
 8001b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8001b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	18db      	adds	r3, r3, r3
 8001bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	eb42 0303 	adc.w	r3, r2, r3
 8001bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8001bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001bd6:	f7fe fafb 	bl	80001d0 <__aeabi_uldivmod>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <UART_SetConfig+0x2d4>)
 8001be2:	fba3 2301 	umull	r2, r3, r3, r1
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2264      	movs	r2, #100	; 0x64
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	1acb      	subs	r3, r1, r3
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <UART_SetConfig+0x2d4>)
 8001bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c04:	441c      	add	r4, r3
 8001c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001c18:	4642      	mov	r2, r8
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	1891      	adds	r1, r2, r2
 8001c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c20:	415b      	adcs	r3, r3
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c28:	4641      	mov	r1, r8
 8001c2a:	1851      	adds	r1, r2, r1
 8001c2c:	6339      	str	r1, [r7, #48]	; 0x30
 8001c2e:	4649      	mov	r1, r9
 8001c30:	414b      	adcs	r3, r1
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c40:	4659      	mov	r1, fp
 8001c42:	00cb      	lsls	r3, r1, #3
 8001c44:	4651      	mov	r1, sl
 8001c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c4a:	4651      	mov	r1, sl
 8001c4c:	00ca      	lsls	r2, r1, #3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	4603      	mov	r3, r0
 8001c54:	4642      	mov	r2, r8
 8001c56:	189b      	adds	r3, r3, r2
 8001c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c5c:	464b      	mov	r3, r9
 8001c5e:	460a      	mov	r2, r1
 8001c60:	eb42 0303 	adc.w	r3, r2, r3
 8001c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	18db      	adds	r3, r3, r3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c82:	4613      	mov	r3, r2
 8001c84:	eb42 0303 	adc.w	r3, r2, r3
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001c92:	f7fe fa9d 	bl	80001d0 <__aeabi_uldivmod>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <UART_SetConfig+0x2d4>)
 8001c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	2164      	movs	r1, #100	; 0x64
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	3332      	adds	r3, #50	; 0x32
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <UART_SetConfig+0x2d4>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	f003 0207 	and.w	r2, r3, #7
 8001cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4422      	add	r2, r4
 8001cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001cc4:	e105      	b.n	8001ed2 <UART_SetConfig+0x4d6>
 8001cc6:	bf00      	nop
 8001cc8:	40011000 	.word	0x40011000
 8001ccc:	40011400 	.word	0x40011400
 8001cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001cde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	464b      	mov	r3, r9
 8001cea:	1891      	adds	r1, r2, r2
 8001cec:	6239      	str	r1, [r7, #32]
 8001cee:	415b      	adcs	r3, r3
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	1854      	adds	r4, r2, r1
 8001cfa:	4649      	mov	r1, r9
 8001cfc:	eb43 0501 	adc.w	r5, r3, r1
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	00eb      	lsls	r3, r5, #3
 8001d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0e:	00e2      	lsls	r2, r4, #3
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	4643      	mov	r3, r8
 8001d16:	18e3      	adds	r3, r4, r3
 8001d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d1c:	464b      	mov	r3, r9
 8001d1e:	eb45 0303 	adc.w	r3, r5, r3
 8001d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d42:	4629      	mov	r1, r5
 8001d44:	008b      	lsls	r3, r1, #2
 8001d46:	4621      	mov	r1, r4
 8001d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	008a      	lsls	r2, r1, #2
 8001d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001d54:	f7fe fa3c 	bl	80001d0 <__aeabi_uldivmod>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4b60      	ldr	r3, [pc, #384]	; (8001ee0 <UART_SetConfig+0x4e4>)
 8001d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	011c      	lsls	r4, r3, #4
 8001d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001d78:	4642      	mov	r2, r8
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	1891      	adds	r1, r2, r2
 8001d7e:	61b9      	str	r1, [r7, #24]
 8001d80:	415b      	adcs	r3, r3
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d88:	4641      	mov	r1, r8
 8001d8a:	1851      	adds	r1, r2, r1
 8001d8c:	6139      	str	r1, [r7, #16]
 8001d8e:	4649      	mov	r1, r9
 8001d90:	414b      	adcs	r3, r1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001da0:	4659      	mov	r1, fp
 8001da2:	00cb      	lsls	r3, r1, #3
 8001da4:	4651      	mov	r1, sl
 8001da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001daa:	4651      	mov	r1, sl
 8001dac:	00ca      	lsls	r2, r1, #3
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	4642      	mov	r2, r8
 8001db6:	189b      	adds	r3, r3, r2
 8001db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dbc:	464b      	mov	r3, r9
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	eb42 0303 	adc.w	r3, r2, r3
 8001dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001de0:	4649      	mov	r1, r9
 8001de2:	008b      	lsls	r3, r1, #2
 8001de4:	4641      	mov	r1, r8
 8001de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dea:	4641      	mov	r1, r8
 8001dec:	008a      	lsls	r2, r1, #2
 8001dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001df2:	f7fe f9ed 	bl	80001d0 <__aeabi_uldivmod>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <UART_SetConfig+0x4e4>)
 8001dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	2164      	movs	r1, #100	; 0x64
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	3332      	adds	r3, #50	; 0x32
 8001e0e:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <UART_SetConfig+0x4e4>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e1a:	441c      	add	r4, r3
 8001e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e20:	2200      	movs	r2, #0
 8001e22:	673b      	str	r3, [r7, #112]	; 0x70
 8001e24:	677a      	str	r2, [r7, #116]	; 0x74
 8001e26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e2a:	4642      	mov	r2, r8
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	1891      	adds	r1, r2, r2
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	415b      	adcs	r3, r3
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e3a:	4641      	mov	r1, r8
 8001e3c:	1851      	adds	r1, r2, r1
 8001e3e:	6039      	str	r1, [r7, #0]
 8001e40:	4649      	mov	r1, r9
 8001e42:	414b      	adcs	r3, r1
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e52:	4659      	mov	r1, fp
 8001e54:	00cb      	lsls	r3, r1, #3
 8001e56:	4651      	mov	r1, sl
 8001e58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e5c:	4651      	mov	r1, sl
 8001e5e:	00ca      	lsls	r2, r1, #3
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	4603      	mov	r3, r0
 8001e66:	4642      	mov	r2, r8
 8001e68:	189b      	adds	r3, r3, r2
 8001e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	460a      	mov	r2, r1
 8001e70:	eb42 0303 	adc.w	r3, r2, r3
 8001e74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e80:	667a      	str	r2, [r7, #100]	; 0x64
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001e8e:	4649      	mov	r1, r9
 8001e90:	008b      	lsls	r3, r1, #2
 8001e92:	4641      	mov	r1, r8
 8001e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e98:	4641      	mov	r1, r8
 8001e9a:	008a      	lsls	r2, r1, #2
 8001e9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ea0:	f7fe f996 	bl	80001d0 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <UART_SetConfig+0x4e4>)
 8001eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2164      	movs	r1, #100	; 0x64
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	3332      	adds	r3, #50	; 0x32
 8001ebc:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <UART_SetConfig+0x4e4>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	f003 020f 	and.w	r2, r3, #15
 8001ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4422      	add	r2, r4
 8001ed0:	609a      	str	r2, [r3, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ede:	bf00      	nop
 8001ee0:	51eb851f 	.word	0x51eb851f

08001ee4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f103 0208 	add.w	r2, r3, #8
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f103 0208 	add.w	r2, r3, #8
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 0208 	add.w	r2, r3, #8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d103      	bne.n	8001f5e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e00c      	b.n	8001f78 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3308      	adds	r3, #8
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	e002      	b.n	8001f6c <vListInsert+0x2e>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d2f6      	bcs.n	8001f66 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6892      	ldr	r2, [r2, #8]
 8001fc6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6852      	ldr	r2, [r2, #4]
 8001fd0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d103      	bne.n	8001fe4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800200e:	2301      	movs	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10a      	bne.n	8002032 <xQueueGenericReset+0x2e>
        __asm volatile
 800201c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002020:	f383 8811 	msr	BASEPRI, r3
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	f3bf 8f4f 	dsb	sy
 800202c:	60fb      	str	r3, [r7, #12]
    }
 800202e:	bf00      	nop
 8002030:	e7fe      	b.n	8002030 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05d      	beq.n	80020f4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800203c:	2b00      	cmp	r3, #0
 800203e:	d059      	beq.n	80020f4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	2100      	movs	r1, #0
 800204a:	fba3 2302 	umull	r2, r3, r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d000      	beq.n	8002054 <xQueueGenericReset+0x50>
 8002052:	2101      	movs	r1, #1
 8002054:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002056:	2b00      	cmp	r3, #0
 8002058:	d14c      	bne.n	80020f4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800205a:	f001 fc95 	bl	8003988 <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	6939      	ldr	r1, [r7, #16]
 8002068:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	441a      	add	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2200      	movs	r2, #0
 8002078:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	3b01      	subs	r3, #1
 800208c:	6939      	ldr	r1, [r7, #16]
 800208e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	441a      	add	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	22ff      	movs	r2, #255	; 0xff
 800209e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	22ff      	movs	r2, #255	; 0xff
 80020a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d114      	bne.n	80020da <xQueueGenericReset+0xd6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01a      	beq.n	80020ee <xQueueGenericReset+0xea>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	3310      	adds	r3, #16
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fffd 	bl	80030bc <xTaskRemoveFromEventList>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d012      	beq.n	80020ee <xQueueGenericReset+0xea>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <xQueueGenericReset+0x11c>)
 80020ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	f3bf 8f6f 	isb	sy
 80020d8:	e009      	b.n	80020ee <xQueueGenericReset+0xea>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	3310      	adds	r3, #16
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff00 	bl	8001ee4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	3324      	adds	r3, #36	; 0x24
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fefb 	bl	8001ee4 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 80020ee:	f001 fc7b 	bl	80039e8 <vPortExitCritical>
 80020f2:	e001      	b.n	80020f8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10a      	bne.n	8002114 <xQueueGenericReset+0x110>
        __asm volatile
 80020fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002102:	f383 8811 	msr	BASEPRI, r3
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	60bb      	str	r3, [r7, #8]
    }
 8002110:	bf00      	nop
 8002112:	e7fe      	b.n	8002112 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002114:	697b      	ldr	r3, [r7, #20]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000ed04 	.word	0xe000ed04

08002124 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02e      	beq.n	800219a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800213c:	2100      	movs	r1, #0
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	fba3 2302 	umull	r2, r3, r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d000      	beq.n	800214c <xQueueGenericCreate+0x28>
 800214a:	2101      	movs	r1, #1
 800214c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d123      	bne.n	800219a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800215a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800215e:	d81c      	bhi.n	800219a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	3350      	adds	r3, #80	; 0x50
 800216e:	4618      	mov	r0, r3
 8002170:	f001 fcec 	bl	8003b4c <pvPortMalloc>
 8002174:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01c      	beq.n	80021b6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3350      	adds	r3, #80	; 0x50
 8002184:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002186:	79fa      	ldrb	r2, [r7, #7]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f814 	bl	80021c0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002198:	e00d      	b.n	80021b6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <xQueueGenericCreate+0x92>
        __asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	613b      	str	r3, [r7, #16]
    }
 80021b2:	bf00      	nop
 80021b4:	e7fe      	b.n	80021b4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80021b6:	69fb      	ldr	r3, [r7, #28]
    }
 80021b8:	4618      	mov	r0, r3
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d103      	bne.n	80021dc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e002      	b.n	80021e2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021ee:	2101      	movs	r1, #1
 80021f0:	69b8      	ldr	r0, [r7, #24]
 80021f2:	f7ff ff07 	bl	8002004 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	; 0x30
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002216:	2300      	movs	r3, #0
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <xQueueGenericSend+0x32>
        __asm volatile
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	623b      	str	r3, [r7, #32]
    }
 8002236:	bf00      	nop
 8002238:	e7fe      	b.n	8002238 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d103      	bne.n	8002248 <xQueueGenericSend+0x40>
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <xQueueGenericSend+0x44>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <xQueueGenericSend+0x46>
 800224c:	2300      	movs	r3, #0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10a      	bne.n	8002268 <xQueueGenericSend+0x60>
        __asm volatile
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	61fb      	str	r3, [r7, #28]
    }
 8002264:	bf00      	nop
 8002266:	e7fe      	b.n	8002266 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d103      	bne.n	8002276 <xQueueGenericSend+0x6e>
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <xQueueGenericSend+0x72>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <xQueueGenericSend+0x74>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <xQueueGenericSend+0x8e>
        __asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	61bb      	str	r3, [r7, #24]
    }
 8002292:	bf00      	nop
 8002294:	e7fe      	b.n	8002294 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002296:	f001 fb77 	bl	8003988 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d302      	bcc.n	80022ac <xQueueGenericSend+0xa4>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d129      	bne.n	8002300 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022b2:	f000 f957 	bl	8002564 <prvCopyDataToQueue>
 80022b6:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d010      	beq.n	80022e2 <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	3324      	adds	r3, #36	; 0x24
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fef9 	bl	80030bc <xTaskRemoveFromEventList>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80022d0:	4b3f      	ldr	r3, [pc, #252]	; (80023d0 <xQueueGenericSend+0x1c8>)
 80022d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	e00a      	b.n	80022f8 <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80022e8:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <xQueueGenericSend+0x1c8>)
 80022ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80022f8:	f001 fb76 	bl	80039e8 <vPortExitCritical>
                return pdPASS;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e063      	b.n	80023c8 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002306:	f001 fb6f 	bl	80039e8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800230a:	2300      	movs	r3, #0
 800230c:	e05c      	b.n	80023c8 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	4618      	mov	r0, r3
 800231a:	f000 ffa5 	bl	8003268 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800231e:	2301      	movs	r3, #1
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002322:	f001 fb61 	bl	80039e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002326:	f000 fc29 	bl	8002b7c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800232a:	f001 fb2d 	bl	8003988 <vPortEnterCritical>
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002334:	b25b      	sxtb	r3, r3
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d103      	bne.n	8002344 <xQueueGenericSend+0x13c>
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800234a:	b25b      	sxtb	r3, r3
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d103      	bne.n	800235a <xQueueGenericSend+0x152>
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800235a:	f001 fb45 	bl	80039e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800235e:	1d3a      	adds	r2, r7, #4
 8002360:	f107 0310 	add.w	r3, r7, #16
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f000 ff94 	bl	8003294 <xTaskCheckForTimeOut>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d124      	bne.n	80023bc <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002374:	f000 f9ee 	bl	8002754 <prvIsQueueFull>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d018      	beq.n	80023b0 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	3310      	adds	r3, #16
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fe74 	bl	8003074 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800238c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800238e:	f000 f979 	bl	8002684 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002392:	f000 fc01 	bl	8002b98 <xTaskResumeAll>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	f47f af7c 	bne.w	8002296 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <xQueueGenericSend+0x1c8>)
 80023a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	e772      	b.n	8002296 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80023b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023b2:	f000 f967 	bl	8002684 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80023b6:	f000 fbef 	bl	8002b98 <xTaskResumeAll>
 80023ba:	e76c      	b.n	8002296 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80023bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023be:	f000 f961 	bl	8002684 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80023c2:	f000 fbe9 	bl	8002b98 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80023c6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3730      	adds	r7, #48	; 0x30
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	e000ed04 	.word	0xe000ed04

080023d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <xQueueReceive+0x30>
        __asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	623b      	str	r3, [r7, #32]
    }
 8002400:	bf00      	nop
 8002402:	e7fe      	b.n	8002402 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <xQueueReceive+0x3e>
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <xQueueReceive+0x42>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <xQueueReceive+0x44>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <xQueueReceive+0x5e>
        __asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	61fb      	str	r3, [r7, #28]
    }
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002432:	f001 faa9 	bl	8003988 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01f      	beq.n	8002482 <xQueueReceive+0xae>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002446:	f000 f8f7 	bl	8002638 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00f      	beq.n	800247a <xQueueReceive+0xa6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	3310      	adds	r3, #16
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fe2c 	bl	80030bc <xTaskRemoveFromEventList>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <xQueueReceive+0xa6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <xQueueReceive+0x18c>)
 800246c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800247a:	f001 fab5 	bl	80039e8 <vPortExitCritical>
                return pdPASS;
 800247e:	2301      	movs	r3, #1
 8002480:	e069      	b.n	8002556 <xQueueReceive+0x182>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <xQueueReceive+0xbc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002488:	f001 faae 	bl	80039e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800248c:	2300      	movs	r3, #0
 800248e:	e062      	b.n	8002556 <xQueueReceive+0x182>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <xQueueReceive+0xd0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fee4 	bl	8003268 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024a0:	2301      	movs	r3, #1
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024a4:	f001 faa0 	bl	80039e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024a8:	f000 fb68 	bl	8002b7c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024ac:	f001 fa6c 	bl	8003988 <vPortEnterCritical>
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d103      	bne.n	80024c6 <xQueueReceive+0xf2>
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d103      	bne.n	80024dc <xQueueReceive+0x108>
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024dc:	f001 fa84 	bl	80039e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024e0:	1d3a      	adds	r2, r7, #4
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fed3 	bl	8003294 <xTaskCheckForTimeOut>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d123      	bne.n	800253c <xQueueReceive+0x168>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024f6:	f000 f917 	bl	8002728 <prvIsQueueEmpty>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d017      	beq.n	8002530 <xQueueReceive+0x15c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	3324      	adds	r3, #36	; 0x24
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fdb3 	bl	8003074 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800250e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002510:	f000 f8b8 	bl	8002684 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002514:	f000 fb40 	bl	8002b98 <xTaskResumeAll>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d189      	bne.n	8002432 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <xQueueReceive+0x18c>)
 8002520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	e780      	b.n	8002432 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002532:	f000 f8a7 	bl	8002684 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002536:	f000 fb2f 	bl	8002b98 <xTaskResumeAll>
 800253a:	e77a      	b.n	8002432 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800253c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800253e:	f000 f8a1 	bl	8002684 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002542:	f000 fb29 	bl	8002b98 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002548:	f000 f8ee 	bl	8002728 <prvIsQueueEmpty>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f43f af6f 	beq.w	8002432 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002554:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002556:	4618      	mov	r0, r3
 8002558:	3730      	adds	r7, #48	; 0x30
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	e000ed04 	.word	0xe000ed04

08002564 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d14d      	bne.n	8002626 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 ffa4 	bl	80034dc <xTaskPriorityDisinherit>
 8002594:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	e043      	b.n	8002626 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d119      	bne.n	80025d8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6858      	ldr	r0, [r3, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	461a      	mov	r2, r3
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	f001 fcee 	bl	8003f90 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	441a      	add	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d32b      	bcc.n	8002626 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	e026      	b.n	8002626 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	68d8      	ldr	r0, [r3, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	461a      	mov	r2, r3
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	f001 fcd4 	bl	8003f90 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	425b      	negs	r3, r3
 80025f2:	441a      	add	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d207      	bcs.n	8002614 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	425b      	negs	r3, r3
 800260e:	441a      	add	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d105      	bne.n	8002626 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	3b01      	subs	r3, #1
 8002624:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800262e:	697b      	ldr	r3, [r7, #20]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d018      	beq.n	800267c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	441a      	add	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	429a      	cmp	r2, r3
 8002662:	d303      	bcc.n	800266c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68d9      	ldr	r1, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	461a      	mov	r2, r3
 8002676:	6838      	ldr	r0, [r7, #0]
 8002678:	f001 fc8a 	bl	8003f90 <memcpy>
    }
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800268c:	f001 f97c 	bl	8003988 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002696:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002698:	e011      	b.n	80026be <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d012      	beq.n	80026c8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3324      	adds	r3, #36	; 0x24
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fd08 	bl	80030bc <xTaskRemoveFromEventList>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80026b2:	f000 fe55 	bl	8003360 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	dce9      	bgt.n	800269a <prvUnlockQueue+0x16>
 80026c6:	e000      	b.n	80026ca <prvUnlockQueue+0x46>
                        break;
 80026c8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	22ff      	movs	r2, #255	; 0xff
 80026ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80026d2:	f001 f989 	bl	80039e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026d6:	f001 f957 	bl	8003988 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026e2:	e011      	b.n	8002708 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d012      	beq.n	8002712 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3310      	adds	r3, #16
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fce3 	bl	80030bc <xTaskRemoveFromEventList>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026fc:	f000 fe30 	bl	8003360 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002700:	7bbb      	ldrb	r3, [r7, #14]
 8002702:	3b01      	subs	r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800270c:	2b00      	cmp	r3, #0
 800270e:	dce9      	bgt.n	80026e4 <prvUnlockQueue+0x60>
 8002710:	e000      	b.n	8002714 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002712:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	22ff      	movs	r2, #255	; 0xff
 8002718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800271c:	f001 f964 	bl	80039e8 <vPortExitCritical>
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002730:	f001 f92a 	bl	8003988 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800273c:	2301      	movs	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e001      	b.n	8002746 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002746:	f001 f94f 	bl	80039e8 <vPortExitCritical>

    return xReturn;
 800274a:	68fb      	ldr	r3, [r7, #12]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800275c:	f001 f914 	bl	8003988 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	429a      	cmp	r2, r3
 800276a:	d102      	bne.n	8002772 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800276c:	2301      	movs	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e001      	b.n	8002776 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002776:	f001 f937 	bl	80039e8 <vPortExitCritical>

    return xReturn;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002784:	b580      	push	{r7, lr}
 8002786:	b08c      	sub	sp, #48	; 0x30
 8002788:	af04      	add	r7, sp, #16
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4618      	mov	r0, r3
 800279a:	f001 f9d7 	bl	8003b4c <pvPortMalloc>
 800279e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00e      	beq.n	80027c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027a6:	2058      	movs	r0, #88	; 0x58
 80027a8:	f001 f9d0 	bl	8003b4c <pvPortMalloc>
 80027ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
 80027ba:	e005      	b.n	80027c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80027bc:	6978      	ldr	r0, [r7, #20]
 80027be:	f001 faa5 	bl	8003d0c <vPortFree>
 80027c2:	e001      	b.n	80027c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d013      	beq.n	80027f6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027ce:	88fa      	ldrh	r2, [r7, #6]
 80027d0:	2300      	movs	r3, #0
 80027d2:	9303      	str	r3, [sp, #12]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	9302      	str	r3, [sp, #8]
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f80e 	bl	8002806 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80027ea:	69f8      	ldr	r0, [r7, #28]
 80027ec:	f000 f8b0 	bl	8002950 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80027f0:	2301      	movs	r3, #1
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	e002      	b.n	80027fc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80027fc:	69bb      	ldr	r3, [r7, #24]
    }
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b088      	sub	sp, #32
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	461a      	mov	r2, r3
 800281e:	21a5      	movs	r1, #165	; 0xa5
 8002820:	f001 fbc4 	bl	8003fac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800282e:	3b01      	subs	r3, #1
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f023 0307 	bic.w	r3, r3, #7
 800283c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	617b      	str	r3, [r7, #20]
    }
 800285a:	bf00      	nop
 800285c:	e7fe      	b.n	800285c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01f      	beq.n	80028a4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	e012      	b.n	8002890 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	7819      	ldrb	r1, [r3, #0]
 8002872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	3334      	adds	r3, #52	; 0x34
 800287a:	460a      	mov	r2, r1
 800287c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	2b09      	cmp	r3, #9
 8002894:	d9e9      	bls.n	800286a <prvInitialiseNewTask+0x64>
 8002896:	e000      	b.n	800289a <prvInitialiseNewTask+0x94>
            {
                break;
 8002898:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028a2:	e003      	b.n	80028ac <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d90a      	bls.n	80028c8 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	613b      	str	r3, [r7, #16]
    }
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d901      	bls.n	80028d2 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028ce:	2304      	movs	r3, #4
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028dc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	2200      	movs	r2, #0
 80028e2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	3304      	adds	r3, #4
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fb1b 	bl	8001f24 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	3318      	adds	r3, #24
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fb16 	bl	8001f24 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	f1c3 0205 	rsb	r2, r3, #5
 8002904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002906:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	3350      	adds	r3, #80	; 0x50
 8002912:	2204      	movs	r2, #4
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f001 fb48 	bl	8003fac <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	3354      	adds	r3, #84	; 0x54
 8002920:	2201      	movs	r2, #1
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f001 fb41 	bl	8003fac <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	68f9      	ldr	r1, [r7, #12]
 800292e:	69b8      	ldr	r0, [r7, #24]
 8002930:	f000 fef8 	bl	8003724 <pxPortInitialiseStack>
 8002934:	4602      	mov	r2, r0
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002944:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002946:	bf00      	nop
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002958:	f001 f816 	bl	8003988 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800295c:	4b40      	ldr	r3, [pc, #256]	; (8002a60 <prvAddNewTaskToReadyList+0x110>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	4a3f      	ldr	r2, [pc, #252]	; (8002a60 <prvAddNewTaskToReadyList+0x110>)
 8002964:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002966:	4b3f      	ldr	r3, [pc, #252]	; (8002a64 <prvAddNewTaskToReadyList+0x114>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800296e:	4a3d      	ldr	r2, [pc, #244]	; (8002a64 <prvAddNewTaskToReadyList+0x114>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002974:	4b3a      	ldr	r3, [pc, #232]	; (8002a60 <prvAddNewTaskToReadyList+0x110>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d110      	bne.n	800299e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800297c:	f000 fd14 	bl	80033a8 <prvInitialiseTaskLists>
 8002980:	e00d      	b.n	800299e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002982:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <prvAddNewTaskToReadyList+0x118>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800298a:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <prvAddNewTaskToReadyList+0x114>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	429a      	cmp	r2, r3
 8002996:	d802      	bhi.n	800299e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002998:	4a32      	ldr	r2, [pc, #200]	; (8002a64 <prvAddNewTaskToReadyList+0x114>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800299e:	4b33      	ldr	r3, [pc, #204]	; (8002a6c <prvAddNewTaskToReadyList+0x11c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	4a31      	ldr	r2, [pc, #196]	; (8002a6c <prvAddNewTaskToReadyList+0x11c>)
 80029a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029a8:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <prvAddNewTaskToReadyList+0x11c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2201      	movs	r2, #1
 80029b6:	409a      	lsls	r2, r3
 80029b8:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <prvAddNewTaskToReadyList+0x120>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	4a2c      	ldr	r2, [pc, #176]	; (8002a70 <prvAddNewTaskToReadyList+0x120>)
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c6:	492b      	ldr	r1, [pc, #172]	; (8002a74 <prvAddNewTaskToReadyList+0x124>)
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3304      	adds	r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	3204      	adds	r2, #4
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1d1a      	adds	r2, r3, #4
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <prvAddNewTaskToReadyList+0x124>)
 8002a06:	441a      	add	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	615a      	str	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	4918      	ldr	r1, [pc, #96]	; (8002a74 <prvAddNewTaskToReadyList+0x124>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	1c59      	adds	r1, r3, #1
 8002a20:	4814      	ldr	r0, [pc, #80]	; (8002a74 <prvAddNewTaskToReadyList+0x124>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4403      	add	r3, r0
 8002a2c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a2e:	f000 ffdb 	bl	80039e8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a32:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <prvAddNewTaskToReadyList+0x118>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00e      	beq.n	8002a58 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <prvAddNewTaskToReadyList+0x114>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d207      	bcs.n	8002a58 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <prvAddNewTaskToReadyList+0x128>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000015c 	.word	0x2000015c
 8002a64:	20000084 	.word	0x20000084
 8002a68:	20000168 	.word	0x20000168
 8002a6c:	20000178 	.word	0x20000178
 8002a70:	20000164 	.word	0x20000164
 8002a74:	20000088 	.word	0x20000088
 8002a78:	e000ed04 	.word	0xe000ed04

08002a7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d017      	beq.n	8002abe <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <vTaskDelay+0x60>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <vTaskDelay+0x30>
        __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	60bb      	str	r3, [r7, #8]
    }
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002aac:	f000 f866 	bl	8002b7c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fdb6 	bl	8003624 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ab8:	f000 f86e 	bl	8002b98 <xTaskResumeAll>
 8002abc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d107      	bne.n	8002ad4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <vTaskDelay+0x64>)
 8002ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000184 	.word	0x20000184
 8002ae0:	e000ed04 	.word	0xe000ed04

08002ae4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <vTaskStartScheduler+0x7c>)
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2300      	movs	r3, #0
 8002af4:	2282      	movs	r2, #130	; 0x82
 8002af6:	491b      	ldr	r1, [pc, #108]	; (8002b64 <vTaskStartScheduler+0x80>)
 8002af8:	481b      	ldr	r0, [pc, #108]	; (8002b68 <vTaskStartScheduler+0x84>)
 8002afa:	f7ff fe43 	bl	8002784 <xTaskCreate>
 8002afe:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d116      	bne.n	8002b34 <vTaskStartScheduler+0x50>
        __asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	60bb      	str	r3, [r7, #8]
    }
 8002b18:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <vTaskStartScheduler+0x88>)
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <vTaskStartScheduler+0x8c>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <vTaskStartScheduler+0x90>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002b2e:	f000 fe89 	bl	8003844 <xPortStartScheduler>
 8002b32:	e00e      	b.n	8002b52 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d10a      	bne.n	8002b52 <vTaskStartScheduler+0x6e>
        __asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	607b      	str	r3, [r7, #4]
    }
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <vTaskStartScheduler+0x94>)
 8002b54:	681b      	ldr	r3, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000180 	.word	0x20000180
 8002b64:	0800401c 	.word	0x0800401c
 8002b68:	08003379 	.word	0x08003379
 8002b6c:	2000017c 	.word	0x2000017c
 8002b70:	20000168 	.word	0x20000168
 8002b74:	20000160 	.word	0x20000160
 8002b78:	2000000c 	.word	0x2000000c

08002b7c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <vTaskSuspendAll+0x18>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <vTaskSuspendAll+0x18>)
 8002b88:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	20000184 	.word	0x20000184

08002b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002ba6:	4b71      	ldr	r3, [pc, #452]	; (8002d6c <xTaskResumeAll+0x1d4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <xTaskResumeAll+0x2c>
        __asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	607b      	str	r3, [r7, #4]
    }
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002bc4:	f000 fee0 	bl	8003988 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002bc8:	4b68      	ldr	r3, [pc, #416]	; (8002d6c <xTaskResumeAll+0x1d4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	4a67      	ldr	r2, [pc, #412]	; (8002d6c <xTaskResumeAll+0x1d4>)
 8002bd0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bd2:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <xTaskResumeAll+0x1d4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 80c0 	bne.w	8002d5c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bdc:	4b64      	ldr	r3, [pc, #400]	; (8002d70 <xTaskResumeAll+0x1d8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80bb 	beq.w	8002d5c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002be6:	e08a      	b.n	8002cfe <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002be8:	4b62      	ldr	r3, [pc, #392]	; (8002d74 <xTaskResumeAll+0x1dc>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	6a12      	ldr	r2, [r2, #32]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	69d2      	ldr	r2, [r2, #28]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3318      	adds	r3, #24
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d103      	bne.n	8002c1e <xTaskResumeAll+0x86>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	6a1a      	ldr	r2, [r3, #32]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2200      	movs	r2, #0
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	1e5a      	subs	r2, r3, #1
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	68d2      	ldr	r2, [r2, #12]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	6892      	ldr	r2, [r2, #8]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d103      	bne.n	8002c5c <xTaskResumeAll+0xc4>
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	615a      	str	r2, [r3, #20]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	1e5a      	subs	r2, r3, #1
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	2201      	movs	r2, #1
 8002c72:	409a      	lsls	r2, r3
 8002c74:	4b40      	ldr	r3, [pc, #256]	; (8002d78 <xTaskResumeAll+0x1e0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	4a3f      	ldr	r2, [pc, #252]	; (8002d78 <xTaskResumeAll+0x1e0>)
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c82:	493e      	ldr	r1, [pc, #248]	; (8002d7c <xTaskResumeAll+0x1e4>)
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3304      	adds	r3, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	3204      	adds	r2, #4
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	1d1a      	adds	r2, r3, #4
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4a2e      	ldr	r2, [pc, #184]	; (8002d7c <xTaskResumeAll+0x1e4>)
 8002cc2:	441a      	add	r2, r3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	615a      	str	r2, [r3, #20]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ccc:	492b      	ldr	r1, [pc, #172]	; (8002d7c <xTaskResumeAll+0x1e4>)
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1c59      	adds	r1, r3, #1
 8002cdc:	4827      	ldr	r0, [pc, #156]	; (8002d7c <xTaskResumeAll+0x1e4>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4403      	add	r3, r0
 8002ce8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <xTaskResumeAll+0x1e8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d302      	bcc.n	8002cfe <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <xTaskResumeAll+0x1ec>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <xTaskResumeAll+0x1dc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f47f af70 	bne.w	8002be8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d0e:	f000 fbc9 	bl	80034a4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <xTaskResumeAll+0x1f0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d010      	beq.n	8002d40 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d1e:	f000 f837 	bl	8002d90 <xTaskIncrementTick>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <xTaskResumeAll+0x1ec>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f1      	bne.n	8002d1e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <xTaskResumeAll+0x1f0>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d40:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <xTaskResumeAll+0x1ec>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <xTaskResumeAll+0x1f4>)
 8002d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d5c:	f000 fe44 	bl	80039e8 <vPortExitCritical>

    return xAlreadyYielded;
 8002d60:	69bb      	ldr	r3, [r7, #24]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000184 	.word	0x20000184
 8002d70:	2000015c 	.word	0x2000015c
 8002d74:	2000011c 	.word	0x2000011c
 8002d78:	20000164 	.word	0x20000164
 8002d7c:	20000088 	.word	0x20000088
 8002d80:	20000084 	.word	0x20000084
 8002d84:	20000170 	.word	0x20000170
 8002d88:	2000016c 	.word	0x2000016c
 8002d8c:	e000ed04 	.word	0xe000ed04

08002d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d9a:	4b7d      	ldr	r3, [pc, #500]	; (8002f90 <xTaskIncrementTick+0x200>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 80ec 	bne.w	8002f7c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002da4:	4b7b      	ldr	r3, [pc, #492]	; (8002f94 <xTaskIncrementTick+0x204>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002dac:	4a79      	ldr	r2, [pc, #484]	; (8002f94 <xTaskIncrementTick+0x204>)
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d120      	bne.n	8002dfa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002db8:	4b77      	ldr	r3, [pc, #476]	; (8002f98 <xTaskIncrementTick+0x208>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	607b      	str	r3, [r7, #4]
    }
 8002dd4:	bf00      	nop
 8002dd6:	e7fe      	b.n	8002dd6 <xTaskIncrementTick+0x46>
 8002dd8:	4b6f      	ldr	r3, [pc, #444]	; (8002f98 <xTaskIncrementTick+0x208>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	4b6f      	ldr	r3, [pc, #444]	; (8002f9c <xTaskIncrementTick+0x20c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6d      	ldr	r2, [pc, #436]	; (8002f98 <xTaskIncrementTick+0x208>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4a6d      	ldr	r2, [pc, #436]	; (8002f9c <xTaskIncrementTick+0x20c>)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b6c      	ldr	r3, [pc, #432]	; (8002fa0 <xTaskIncrementTick+0x210>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	4a6b      	ldr	r2, [pc, #428]	; (8002fa0 <xTaskIncrementTick+0x210>)
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	f000 fb55 	bl	80034a4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <xTaskIncrementTick+0x214>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a3a      	ldr	r2, [r7, #32]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	f0c0 80a6 	bcc.w	8002f52 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e06:	4b64      	ldr	r3, [pc, #400]	; (8002f98 <xTaskIncrementTick+0x208>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d104      	bne.n	8002e1a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e10:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <xTaskIncrementTick+0x214>)
 8002e12:	f04f 32ff 	mov.w	r2, #4294967295
 8002e16:	601a      	str	r2, [r3, #0]
                    break;
 8002e18:	e09b      	b.n	8002f52 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <xTaskIncrementTick+0x208>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002e2a:	6a3a      	ldr	r2, [r7, #32]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d203      	bcs.n	8002e3a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e32:	4a5c      	ldr	r2, [pc, #368]	; (8002fa4 <xTaskIncrementTick+0x214>)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002e38:	e08b      	b.n	8002f52 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	68d2      	ldr	r2, [r2, #12]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	6892      	ldr	r2, [r2, #8]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d103      	bne.n	8002e68 <xTaskIncrementTick+0xd8>
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	615a      	str	r2, [r3, #20]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	1e5a      	subs	r2, r3, #1
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01e      	beq.n	8002ebe <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	6a12      	ldr	r2, [r2, #32]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	69d2      	ldr	r2, [r2, #28]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	3318      	adds	r3, #24
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d103      	bne.n	8002eae <xTaskIncrementTick+0x11e>
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	6a1a      	ldr	r2, [r3, #32]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <xTaskIncrementTick+0x218>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	4a36      	ldr	r2, [pc, #216]	; (8002fa8 <xTaskIncrementTick+0x218>)
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	4935      	ldr	r1, [pc, #212]	; (8002fac <xTaskIncrementTick+0x21c>)
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	60da      	str	r2, [r3, #12]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	3204      	adds	r2, #4
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	1d1a      	adds	r2, r3, #4
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	609a      	str	r2, [r3, #8]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4a26      	ldr	r2, [pc, #152]	; (8002fac <xTaskIncrementTick+0x21c>)
 8002f14:	441a      	add	r2, r3
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	615a      	str	r2, [r3, #20]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1e:	4923      	ldr	r1, [pc, #140]	; (8002fac <xTaskIncrementTick+0x21c>)
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	1c59      	adds	r1, r3, #1
 8002f2e:	481f      	ldr	r0, [pc, #124]	; (8002fac <xTaskIncrementTick+0x21c>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4403      	add	r3, r0
 8002f3a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <xTaskIncrementTick+0x220>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	429a      	cmp	r2, r3
 8002f48:	f4ff af5d 	bcc.w	8002e06 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f50:	e759      	b.n	8002e06 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f52:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <xTaskIncrementTick+0x220>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	4914      	ldr	r1, [pc, #80]	; (8002fac <xTaskIncrementTick+0x21c>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d901      	bls.n	8002f6e <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <xTaskIncrementTick+0x224>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8002f76:	2301      	movs	r3, #1
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7a:	e004      	b.n	8002f86 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <xTaskIncrementTick+0x228>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <xTaskIncrementTick+0x228>)
 8002f84:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3728      	adds	r7, #40	; 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000184 	.word	0x20000184
 8002f94:	20000160 	.word	0x20000160
 8002f98:	20000114 	.word	0x20000114
 8002f9c:	20000118 	.word	0x20000118
 8002fa0:	20000174 	.word	0x20000174
 8002fa4:	2000017c 	.word	0x2000017c
 8002fa8:	20000164 	.word	0x20000164
 8002fac:	20000088 	.word	0x20000088
 8002fb0:	20000084 	.word	0x20000084
 8002fb4:	20000170 	.word	0x20000170
 8002fb8:	2000016c 	.word	0x2000016c

08002fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fc2:	4b27      	ldr	r3, [pc, #156]	; (8003060 <vTaskSwitchContext+0xa4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fca:	4b26      	ldr	r3, [pc, #152]	; (8003064 <vTaskSwitchContext+0xa8>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002fd0:	e03f      	b.n	8003052 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <vTaskSwitchContext+0xa8>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd8:	4b23      	ldr	r3, [pc, #140]	; (8003068 <vTaskSwitchContext+0xac>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
 8002fe8:	f1c3 031f 	rsb	r3, r3, #31
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	491f      	ldr	r1, [pc, #124]	; (800306c <vTaskSwitchContext+0xb0>)
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	607b      	str	r3, [r7, #4]
    }
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <vTaskSwitchContext+0x5a>
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <vTaskSwitchContext+0xb0>)
 8003024:	4413      	add	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	3308      	adds	r3, #8
 800303a:	429a      	cmp	r2, r3
 800303c:	d104      	bne.n	8003048 <vTaskSwitchContext+0x8c>
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4a08      	ldr	r2, [pc, #32]	; (8003070 <vTaskSwitchContext+0xb4>)
 8003050:	6013      	str	r3, [r2, #0]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000184 	.word	0x20000184
 8003064:	20000170 	.word	0x20000170
 8003068:	20000164 	.word	0x20000164
 800306c:	20000088 	.word	0x20000088
 8003070:	20000084 	.word	0x20000084

08003074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	60fb      	str	r3, [r7, #12]
    }
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <vTaskPlaceOnEventList+0x44>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3318      	adds	r3, #24
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe ff4b 	bl	8001f3e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030a8:	2101      	movs	r1, #1
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	f000 faba 	bl	8003624 <prvAddCurrentTaskToDelayedList>
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000084 	.word	0x20000084

080030bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030bc:	b480      	push	{r7}
 80030be:	b08b      	sub	sp, #44	; 0x2c
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	60fb      	str	r3, [r7, #12]
    }
 80030e4:	bf00      	nop
 80030e6:	e7fe      	b.n	80030e6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	6a3a      	ldr	r2, [r7, #32]
 80030f4:	6a12      	ldr	r2, [r2, #32]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	6a3a      	ldr	r2, [r7, #32]
 80030fe:	69d2      	ldr	r2, [r2, #28]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	3318      	adds	r3, #24
 800310a:	429a      	cmp	r2, r3
 800310c:	d103      	bne.n	8003116 <xTaskRemoveFromEventList+0x5a>
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	6a1a      	ldr	r2, [r3, #32]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	2200      	movs	r2, #0
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	1e5a      	subs	r2, r3, #1
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003126:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <xTaskRemoveFromEventList+0x194>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d15e      	bne.n	80031ec <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	6a3a      	ldr	r2, [r7, #32]
 800313a:	68d2      	ldr	r2, [r2, #12]
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	6a3a      	ldr	r2, [r7, #32]
 8003144:	6892      	ldr	r2, [r2, #8]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	3304      	adds	r3, #4
 8003150:	429a      	cmp	r2, r3
 8003152:	d103      	bne.n	800315c <xTaskRemoveFromEventList+0xa0>
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	2200      	movs	r2, #0
 8003160:	615a      	str	r2, [r3, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2201      	movs	r2, #1
 8003172:	409a      	lsls	r2, r3
 8003174:	4b37      	ldr	r3, [pc, #220]	; (8003254 <xTaskRemoveFromEventList+0x198>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	4a36      	ldr	r2, [pc, #216]	; (8003254 <xTaskRemoveFromEventList+0x198>)
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	4935      	ldr	r1, [pc, #212]	; (8003258 <xTaskRemoveFromEventList+0x19c>)
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3304      	adds	r3, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	3204      	adds	r2, #4
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	1d1a      	adds	r2, r3, #4
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4a25      	ldr	r2, [pc, #148]	; (8003258 <xTaskRemoveFromEventList+0x19c>)
 80031c2:	441a      	add	r2, r3
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	615a      	str	r2, [r3, #20]
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	4922      	ldr	r1, [pc, #136]	; (8003258 <xTaskRemoveFromEventList+0x19c>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	481e      	ldr	r0, [pc, #120]	; (8003258 <xTaskRemoveFromEventList+0x19c>)
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4403      	add	r3, r0
 80031e8:	6019      	str	r1, [r3, #0]
 80031ea:	e01b      	b.n	8003224 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <xTaskRemoveFromEventList+0x1a0>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	61da      	str	r2, [r3, #28]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	621a      	str	r2, [r3, #32]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	6a3a      	ldr	r2, [r7, #32]
 8003206:	3218      	adds	r2, #24
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f103 0218 	add.w	r2, r3, #24
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	4a11      	ldr	r2, [pc, #68]	; (800325c <xTaskRemoveFromEventList+0x1a0>)
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <xTaskRemoveFromEventList+0x1a0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	4a0e      	ldr	r2, [pc, #56]	; (800325c <xTaskRemoveFromEventList+0x1a0>)
 8003222:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <xTaskRemoveFromEventList+0x1a4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	429a      	cmp	r2, r3
 8003230:	d905      	bls.n	800323e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003232:	2301      	movs	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <xTaskRemoveFromEventList+0x1a8>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e001      	b.n	8003242 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003244:	4618      	mov	r0, r3
 8003246:	372c      	adds	r7, #44	; 0x2c
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	20000184 	.word	0x20000184
 8003254:	20000164 	.word	0x20000164
 8003258:	20000088 	.word	0x20000088
 800325c:	2000011c 	.word	0x2000011c
 8003260:	20000084 	.word	0x20000084
 8003264:	20000170 	.word	0x20000170

08003268 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <vTaskInternalSetTimeOutState+0x24>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <vTaskInternalSetTimeOutState+0x28>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	605a      	str	r2, [r3, #4]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	20000174 	.word	0x20000174
 8003290:	20000160 	.word	0x20000160

08003294 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	613b      	str	r3, [r7, #16]
    }
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	60fb      	str	r3, [r7, #12]
    }
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80032d6:	f000 fb57 	bl	8003988 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80032da:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <xTaskCheckForTimeOut+0xc4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d102      	bne.n	80032fa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	e026      	b.n	8003348 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <xTaskCheckForTimeOut+0xc8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d00a      	beq.n	800331c <xTaskCheckForTimeOut+0x88>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	429a      	cmp	r2, r3
 800330e:	d305      	bcc.n	800331c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003310:	2301      	movs	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e015      	b.n	8003348 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	429a      	cmp	r2, r3
 8003324:	d20b      	bcs.n	800333e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	1ad2      	subs	r2, r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ff98 	bl	8003268 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	e004      	b.n	8003348 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003344:	2301      	movs	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003348:	f000 fb4e 	bl	80039e8 <vPortExitCritical>

    return xReturn;
 800334c:	69fb      	ldr	r3, [r7, #28]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000160 	.word	0x20000160
 800335c:	20000174 	.word	0x20000174

08003360 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <vTaskMissedYield+0x14>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	bf00      	nop
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	20000170 	.word	0x20000170

08003378 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003380:	f000 f852 	bl	8003428 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <prvIdleTask+0x28>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d9f9      	bls.n	8003380 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <prvIdleTask+0x2c>)
 800338e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800339c:	e7f0      	b.n	8003380 <prvIdleTask+0x8>
 800339e:	bf00      	nop
 80033a0:	20000088 	.word	0x20000088
 80033a4:	e000ed04 	.word	0xe000ed04

080033a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	e00c      	b.n	80033ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4a12      	ldr	r2, [pc, #72]	; (8003408 <prvInitialiseTaskLists+0x60>)
 80033c0:	4413      	add	r3, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fd8e 	bl	8001ee4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3301      	adds	r3, #1
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d9ef      	bls.n	80033b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80033d4:	480d      	ldr	r0, [pc, #52]	; (800340c <prvInitialiseTaskLists+0x64>)
 80033d6:	f7fe fd85 	bl	8001ee4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80033da:	480d      	ldr	r0, [pc, #52]	; (8003410 <prvInitialiseTaskLists+0x68>)
 80033dc:	f7fe fd82 	bl	8001ee4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80033e0:	480c      	ldr	r0, [pc, #48]	; (8003414 <prvInitialiseTaskLists+0x6c>)
 80033e2:	f7fe fd7f 	bl	8001ee4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80033e6:	480c      	ldr	r0, [pc, #48]	; (8003418 <prvInitialiseTaskLists+0x70>)
 80033e8:	f7fe fd7c 	bl	8001ee4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80033ec:	480b      	ldr	r0, [pc, #44]	; (800341c <prvInitialiseTaskLists+0x74>)
 80033ee:	f7fe fd79 	bl	8001ee4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <prvInitialiseTaskLists+0x78>)
 80033f4:	4a05      	ldr	r2, [pc, #20]	; (800340c <prvInitialiseTaskLists+0x64>)
 80033f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <prvInitialiseTaskLists+0x7c>)
 80033fa:	4a05      	ldr	r2, [pc, #20]	; (8003410 <prvInitialiseTaskLists+0x68>)
 80033fc:	601a      	str	r2, [r3, #0]
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000088 	.word	0x20000088
 800340c:	200000ec 	.word	0x200000ec
 8003410:	20000100 	.word	0x20000100
 8003414:	2000011c 	.word	0x2000011c
 8003418:	20000130 	.word	0x20000130
 800341c:	20000148 	.word	0x20000148
 8003420:	20000114 	.word	0x20000114
 8003424:	20000118 	.word	0x20000118

08003428 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800342e:	e019      	b.n	8003464 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003430:	f000 faaa 	bl	8003988 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <prvCheckTasksWaitingTermination+0x50>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe fdb5 	bl	8001fb0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <prvCheckTasksWaitingTermination+0x54>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3b01      	subs	r3, #1
 800344c:	4a0b      	ldr	r2, [pc, #44]	; (800347c <prvCheckTasksWaitingTermination+0x54>)
 800344e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <prvCheckTasksWaitingTermination+0x58>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3b01      	subs	r3, #1
 8003456:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <prvCheckTasksWaitingTermination+0x58>)
 8003458:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800345a:	f000 fac5 	bl	80039e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f810 	bl	8003484 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <prvCheckTasksWaitingTermination+0x58>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e1      	bne.n	8003430 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000130 	.word	0x20000130
 800347c:	2000015c 	.word	0x2000015c
 8003480:	20000144 	.word	0x20000144

08003484 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fc3b 	bl	8003d0c <vPortFree>
                vPortFree( pxTCB );
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fc38 	bl	8003d0c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <prvResetNextTaskUnblockTime+0x30>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <prvResetNextTaskUnblockTime+0x34>)
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80034ba:	e005      	b.n	80034c8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <prvResetNextTaskUnblockTime+0x30>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <prvResetNextTaskUnblockTime+0x34>)
 80034c6:	6013      	str	r3, [r2, #0]
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000114 	.word	0x20000114
 80034d8:	2000017c 	.word	0x2000017c

080034dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 808c 	beq.w	800360c <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80034f4:	4b48      	ldr	r3, [pc, #288]	; (8003618 <xTaskPriorityDisinherit+0x13c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d00a      	beq.n	8003514 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	613b      	str	r3, [r7, #16]
    }
 8003510:	bf00      	nop
 8003512:	e7fe      	b.n	8003512 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	60fb      	str	r3, [r7, #12]
    }
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	1e5a      	subs	r2, r3, #1
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003544:	429a      	cmp	r2, r3
 8003546:	d061      	beq.n	800360c <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d15d      	bne.n	800360c <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	3304      	adds	r3, #4
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fd2b 	bl	8001fb0 <uxListRemove>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	2201      	movs	r2, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43da      	mvns	r2, r3
 800356c:	4b2b      	ldr	r3, [pc, #172]	; (800361c <xTaskPriorityDisinherit+0x140>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4013      	ands	r3, r2
 8003572:	4a2a      	ldr	r2, [pc, #168]	; (800361c <xTaskPriorityDisinherit+0x140>)
 8003574:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	f1c3 0205 	rsb	r2, r3, #5
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	2201      	movs	r2, #1
 8003590:	409a      	lsls	r2, r3
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <xTaskPriorityDisinherit+0x140>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	4a20      	ldr	r2, [pc, #128]	; (800361c <xTaskPriorityDisinherit+0x140>)
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	491f      	ldr	r1, [pc, #124]	; (8003620 <xTaskPriorityDisinherit+0x144>)
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	3304      	adds	r3, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	60da      	str	r2, [r3, #12]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	3204      	adds	r2, #4
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	1d1a      	adds	r2, r3, #4
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <xTaskPriorityDisinherit+0x144>)
 80035e0:	441a      	add	r2, r3
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	615a      	str	r2, [r3, #20]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ea:	490d      	ldr	r1, [pc, #52]	; (8003620 <xTaskPriorityDisinherit+0x144>)
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1c59      	adds	r1, r3, #1
 80035fa:	4809      	ldr	r0, [pc, #36]	; (8003620 <xTaskPriorityDisinherit+0x144>)
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4403      	add	r3, r0
 8003606:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003608:	2301      	movs	r3, #1
 800360a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800360c:	69fb      	ldr	r3, [r7, #28]
    }
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000084 	.word	0x20000084
 800361c:	20000164 	.word	0x20000164
 8003620:	20000088 	.word	0x20000088

08003624 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003634:	4b35      	ldr	r3, [pc, #212]	; (800370c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3304      	adds	r3, #4
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fcb8 	bl	8001fb0 <uxListRemove>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10b      	bne.n	800365e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	2201      	movs	r2, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43da      	mvns	r2, r3
 8003654:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <prvAddCurrentTaskToDelayedList+0xec>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4013      	ands	r3, r2
 800365a:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <prvAddCurrentTaskToDelayedList+0xec>)
 800365c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d124      	bne.n	80036b0 <prvAddCurrentTaskToDelayedList+0x8c>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d021      	beq.n	80036b0 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800366c:	4b29      	ldr	r3, [pc, #164]	; (8003714 <prvAddCurrentTaskToDelayedList+0xf0>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <prvAddCurrentTaskToDelayedList+0xe8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	6892      	ldr	r2, [r2, #8]
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	4b21      	ldr	r3, [pc, #132]	; (800370c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	3204      	adds	r2, #4
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	4b1e      	ldr	r3, [pc, #120]	; (800370c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	1d1a      	adds	r2, r3, #4
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <prvAddCurrentTaskToDelayedList+0xe8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036a0:	615a      	str	r2, [r3, #20]
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80036ae:	e026      	b.n	80036fe <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <prvAddCurrentTaskToDelayedList+0xe8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d209      	bcs.n	80036dc <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <prvAddCurrentTaskToDelayedList+0xf4>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <prvAddCurrentTaskToDelayedList+0xe8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f7fe fc32 	bl	8001f3e <vListInsert>
}
 80036da:	e010      	b.n	80036fe <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <prvAddCurrentTaskToDelayedList+0xf8>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <prvAddCurrentTaskToDelayedList+0xe8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3304      	adds	r3, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f7fe fc28 	bl	8001f3e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <prvAddCurrentTaskToDelayedList+0xfc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d202      	bcs.n	80036fe <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80036f8:	4a09      	ldr	r2, [pc, #36]	; (8003720 <prvAddCurrentTaskToDelayedList+0xfc>)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6013      	str	r3, [r2, #0]
}
 80036fe:	bf00      	nop
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000160 	.word	0x20000160
 800370c:	20000084 	.word	0x20000084
 8003710:	20000164 	.word	0x20000164
 8003714:	20000148 	.word	0x20000148
 8003718:	20000118 	.word	0x20000118
 800371c:	20000114 	.word	0x20000114
 8003720:	2000017c 	.word	0x2000017c

08003724 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3b04      	subs	r3, #4
 8003734:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800373c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3b04      	subs	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3b04      	subs	r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003754:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <pxPortInitialiseStack+0x64>)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3b14      	subs	r3, #20
 800375e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3b04      	subs	r3, #4
 800376a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f06f 0202 	mvn.w	r2, #2
 8003772:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3b20      	subs	r3, #32
 8003778:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800377a:	68fb      	ldr	r3, [r7, #12]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	0800378d 	.word	0x0800378d

0800378c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <prvTaskExitError+0x54>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d00a      	beq.n	80037b6 <prvTaskExitError+0x2a>
        __asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	60fb      	str	r3, [r7, #12]
    }
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <prvTaskExitError+0x28>
        __asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	60bb      	str	r3, [r7, #8]
    }
 80037c8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80037ca:	bf00      	nop
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0fc      	beq.n	80037cc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000010 	.word	0x20000010
	...

080037f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80037f0:	4b07      	ldr	r3, [pc, #28]	; (8003810 <pxCurrentTCBConst2>)
 80037f2:	6819      	ldr	r1, [r3, #0]
 80037f4:	6808      	ldr	r0, [r1, #0]
 80037f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037fa:	f380 8809 	msr	PSP, r0
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f380 8811 	msr	BASEPRI, r0
 800380a:	4770      	bx	lr
 800380c:	f3af 8000 	nop.w

08003810 <pxCurrentTCBConst2>:
 8003810:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop

08003818 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003818:	4808      	ldr	r0, [pc, #32]	; (800383c <prvPortStartFirstTask+0x24>)
 800381a:	6800      	ldr	r0, [r0, #0]
 800381c:	6800      	ldr	r0, [r0, #0]
 800381e:	f380 8808 	msr	MSP, r0
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f380 8814 	msr	CONTROL, r0
 800382a:	b662      	cpsie	i
 800382c:	b661      	cpsie	f
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	df00      	svc	0
 8003838:	bf00      	nop
 800383a:	0000      	.short	0x0000
 800383c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop

08003844 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800384a:	4b46      	ldr	r3, [pc, #280]	; (8003964 <xPortStartScheduler+0x120>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a46      	ldr	r2, [pc, #280]	; (8003968 <xPortStartScheduler+0x124>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d10a      	bne.n	800386a <xPortStartScheduler+0x26>
        __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	613b      	str	r3, [r7, #16]
    }
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <xPortStartScheduler+0x120>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a3f      	ldr	r2, [pc, #252]	; (800396c <xPortStartScheduler+0x128>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d10a      	bne.n	800388a <xPortStartScheduler+0x46>
        __asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	60fb      	str	r3, [r7, #12]
    }
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800388a:	4b39      	ldr	r3, [pc, #228]	; (8003970 <xPortStartScheduler+0x12c>)
 800388c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	22ff      	movs	r2, #255	; 0xff
 800389a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <xPortStartScheduler+0x130>)
 80038b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <xPortStartScheduler+0x134>)
 80038b4:	2207      	movs	r2, #7
 80038b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038b8:	e009      	b.n	80038ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80038ba:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <xPortStartScheduler+0x134>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3b01      	subs	r3, #1
 80038c0:	4a2d      	ldr	r2, [pc, #180]	; (8003978 <xPortStartScheduler+0x134>)
 80038c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b80      	cmp	r3, #128	; 0x80
 80038d8:	d0ef      	beq.n	80038ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038da:	4b27      	ldr	r3, [pc, #156]	; (8003978 <xPortStartScheduler+0x134>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f1c3 0307 	rsb	r3, r3, #7
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d00a      	beq.n	80038fc <xPortStartScheduler+0xb8>
        __asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	60bb      	str	r3, [r7, #8]
    }
 80038f8:	bf00      	nop
 80038fa:	e7fe      	b.n	80038fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038fc:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <xPortStartScheduler+0x134>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <xPortStartScheduler+0x134>)
 8003904:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003906:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <xPortStartScheduler+0x134>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800390e:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <xPortStartScheduler+0x134>)
 8003910:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800391a:	4b18      	ldr	r3, [pc, #96]	; (800397c <xPortStartScheduler+0x138>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a17      	ldr	r2, [pc, #92]	; (800397c <xPortStartScheduler+0x138>)
 8003920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003924:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <xPortStartScheduler+0x138>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a14      	ldr	r2, [pc, #80]	; (800397c <xPortStartScheduler+0x138>)
 800392c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003930:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003932:	f000 f8db 	bl	8003aec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <xPortStartScheduler+0x13c>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800393c:	f000 f8fa 	bl	8003b34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003940:	4b10      	ldr	r3, [pc, #64]	; (8003984 <xPortStartScheduler+0x140>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a0f      	ldr	r2, [pc, #60]	; (8003984 <xPortStartScheduler+0x140>)
 8003946:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800394a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800394c:	f7ff ff64 	bl	8003818 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003950:	f7ff fb34 	bl	8002fbc <vTaskSwitchContext>
    prvTaskExitError();
 8003954:	f7ff ff1a 	bl	800378c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	e000ed00 	.word	0xe000ed00
 8003968:	410fc271 	.word	0x410fc271
 800396c:	410fc270 	.word	0x410fc270
 8003970:	e000e400 	.word	0xe000e400
 8003974:	20000188 	.word	0x20000188
 8003978:	2000018c 	.word	0x2000018c
 800397c:	e000ed20 	.word	0xe000ed20
 8003980:	20000010 	.word	0x20000010
 8003984:	e000ef34 	.word	0xe000ef34

08003988 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
        __asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	607b      	str	r3, [r7, #4]
    }
 80039a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80039a2:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <vPortEnterCritical+0x58>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3301      	adds	r3, #1
 80039a8:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <vPortEnterCritical+0x58>)
 80039aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <vPortEnterCritical+0x58>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d10f      	bne.n	80039d4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <vPortEnterCritical+0x5c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <vPortEnterCritical+0x4c>
        __asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	603b      	str	r3, [r7, #0]
    }
 80039d0:	bf00      	nop
 80039d2:	e7fe      	b.n	80039d2 <vPortEnterCritical+0x4a>
    }
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	20000010 	.word	0x20000010
 80039e4:	e000ed04 	.word	0xe000ed04

080039e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <vPortExitCritical+0x50>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <vPortExitCritical+0x24>
        __asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	607b      	str	r3, [r7, #4]
    }
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <vPortExitCritical+0x50>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <vPortExitCritical+0x50>)
 8003a14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <vPortExitCritical+0x50>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d105      	bne.n	8003a2a <vPortExitCritical+0x42>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003a28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	20000010 	.word	0x20000010
 8003a3c:	00000000 	.word	0x00000000

08003a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003a40:	f3ef 8009 	mrs	r0, PSP
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <pxCurrentTCBConst>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	f01e 0f10 	tst.w	lr, #16
 8003a50:	bf08      	it	eq
 8003a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5a:	6010      	str	r0, [r2, #0]
 8003a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a64:	f380 8811 	msr	BASEPRI, r0
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f7ff faa4 	bl	8002fbc <vTaskSwitchContext>
 8003a74:	f04f 0000 	mov.w	r0, #0
 8003a78:	f380 8811 	msr	BASEPRI, r0
 8003a7c:	bc09      	pop	{r0, r3}
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	6808      	ldr	r0, [r1, #0]
 8003a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a86:	f01e 0f10 	tst.w	lr, #16
 8003a8a:	bf08      	it	eq
 8003a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a90:	f380 8809 	msr	PSP, r0
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	f3af 8000 	nop.w

08003aa0 <pxCurrentTCBConst>:
 8003aa0:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop

08003aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
        __asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	607b      	str	r3, [r7, #4]
    }
 8003ac0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ac2:	f7ff f965 	bl	8002d90 <xTaskIncrementTick>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <SysTick_Handler+0x40>)
 8003ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f383 8811 	msr	BASEPRI, r3
    }
 8003ade:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <vPortSetupTimerInterrupt+0x34>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <vPortSetupTimerInterrupt+0x38>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <vPortSetupTimerInterrupt+0x3c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <vPortSetupTimerInterrupt+0x40>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <vPortSetupTimerInterrupt+0x44>)
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <vPortSetupTimerInterrupt+0x34>)
 8003b10:	2207      	movs	r2, #7
 8003b12:	601a      	str	r2, [r3, #0]
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	e000e010 	.word	0xe000e010
 8003b24:	e000e018 	.word	0xe000e018
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	10624dd3 	.word	0x10624dd3
 8003b30:	e000e014 	.word	0xe000e014

08003b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b44 <vPortEnableVFP+0x10>
 8003b38:	6801      	ldr	r1, [r0, #0]
 8003b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b3e:	6001      	str	r1, [r0, #0]
 8003b40:	4770      	bx	lr
 8003b42:	0000      	.short	0x0000
 8003b44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop

08003b4c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003b58:	f7ff f810 	bl	8002b7c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003b5c:	4b65      	ldr	r3, [pc, #404]	; (8003cf4 <pvPortMalloc+0x1a8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003b64:	f000 f934 	bl	8003dd0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b68:	4b63      	ldr	r3, [pc, #396]	; (8003cf8 <pvPortMalloc+0x1ac>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f040 80a7 	bne.w	8003cc4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02d      	beq.n	8003bd8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d227      	bcs.n	8003bd8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003b88:	2208      	movs	r2, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d021      	beq.n	8003bde <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f023 0307 	bic.w	r3, r3, #7
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d214      	bcs.n	8003bd2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f023 0307 	bic.w	r3, r3, #7
 8003bae:	3308      	adds	r3, #8
 8003bb0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d010      	beq.n	8003bde <pvPortMalloc+0x92>
        __asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	617b      	str	r3, [r7, #20]
    }
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003bd6:	e002      	b.n	8003bde <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	e000      	b.n	8003be0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003bde:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d06e      	beq.n	8003cc4 <pvPortMalloc+0x178>
 8003be6:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <pvPortMalloc+0x1b0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d869      	bhi.n	8003cc4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003bf0:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <pvPortMalloc+0x1b4>)
 8003bf2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003bf4:	4b42      	ldr	r3, [pc, #264]	; (8003d00 <pvPortMalloc+0x1b4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bfa:	e004      	b.n	8003c06 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d903      	bls.n	8003c18 <pvPortMalloc+0xcc>
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1f1      	bne.n	8003bfc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003c18:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <pvPortMalloc+0x1a8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d050      	beq.n	8003cc4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2208      	movs	r2, #8
 8003c28:	4413      	add	r3, r2
 8003c2a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	1ad2      	subs	r2, r2, r3
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d91f      	bls.n	8003c84 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <pvPortMalloc+0x120>
        __asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	613b      	str	r3, [r7, #16]
    }
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	1ad2      	subs	r2, r2, r3
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c7e:	69b8      	ldr	r0, [r7, #24]
 8003c80:	f000 f908 	bl	8003e94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <pvPortMalloc+0x1b0>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	; (8003cfc <pvPortMalloc+0x1b0>)
 8003c90:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c92:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <pvPortMalloc+0x1b0>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <pvPortMalloc+0x1b8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d203      	bcs.n	8003ca6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <pvPortMalloc+0x1b0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <pvPortMalloc+0x1b8>)
 8003ca4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <pvPortMalloc+0x1ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <pvPortMalloc+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <pvPortMalloc+0x1bc>)
 8003cc2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003cc4:	f7fe ff68 	bl	8002b98 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <pvPortMalloc+0x19c>
        __asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60fb      	str	r3, [r7, #12]
    }
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3728      	adds	r7, #40	; 0x28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20012d98 	.word	0x20012d98
 8003cf8:	20012dac 	.word	0x20012dac
 8003cfc:	20012d9c 	.word	0x20012d9c
 8003d00:	20012d90 	.word	0x20012d90
 8003d04:	20012da0 	.word	0x20012da0
 8003d08:	20012da4 	.word	0x20012da4

08003d0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04d      	beq.n	8003dba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003d1e:	2308      	movs	r3, #8
 8003d20:	425b      	negs	r3, r3
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4413      	add	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <vPortFree+0xb8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <vPortFree+0x44>
        __asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	60fb      	str	r3, [r7, #12]
    }
 8003d4c:	bf00      	nop
 8003d4e:	e7fe      	b.n	8003d4e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <vPortFree+0x62>
        __asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	60bb      	str	r3, [r7, #8]
    }
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <vPortFree+0xb8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01e      	beq.n	8003dba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11a      	bne.n	8003dba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <vPortFree+0xb8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	401a      	ands	r2, r3
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003d94:	f7fe fef2 	bl	8002b7c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <vPortFree+0xbc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4413      	add	r3, r2
 8003da2:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <vPortFree+0xbc>)
 8003da4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003da6:	6938      	ldr	r0, [r7, #16]
 8003da8:	f000 f874 	bl	8003e94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <vPortFree+0xc0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <vPortFree+0xc0>)
 8003db4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003db6:	f7fe feef 	bl	8002b98 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20012dac 	.word	0x20012dac
 8003dc8:	20012d9c 	.word	0x20012d9c
 8003dcc:	20012da8 	.word	0x20012da8

08003dd0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003dd6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003dda:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <prvHeapInit+0xac>)
 8003dde:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00c      	beq.n	8003e04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3307      	adds	r3, #7
 8003dee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0307 	bic.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	4a1f      	ldr	r2, [pc, #124]	; (8003e7c <prvHeapInit+0xac>)
 8003e00:	4413      	add	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e08:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <prvHeapInit+0xb0>)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003e0e:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <prvHeapInit+0xb0>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0307 	bic.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <prvHeapInit+0xb4>)
 8003e30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <prvHeapInit+0xb4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <prvHeapInit+0xb4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <prvHeapInit+0xb4>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <prvHeapInit+0xb8>)
 8003e5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <prvHeapInit+0xbc>)
 8003e66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <prvHeapInit+0xc0>)
 8003e6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e6e:	601a      	str	r2, [r3, #0]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20000190 	.word	0x20000190
 8003e80:	20012d90 	.word	0x20012d90
 8003e84:	20012d98 	.word	0x20012d98
 8003e88:	20012da0 	.word	0x20012da0
 8003e8c:	20012d9c 	.word	0x20012d9c
 8003e90:	20012dac 	.word	0x20012dac

08003e94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e9c:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <prvInsertBlockIntoFreeList+0xac>)
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e002      	b.n	8003ea8 <prvInsertBlockIntoFreeList+0x14>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d8f7      	bhi.n	8003ea2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d108      	bne.n	8003ed6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	441a      	add	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	441a      	add	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d118      	bne.n	8003f1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <prvInsertBlockIntoFreeList+0xb0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d00d      	beq.n	8003f12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	441a      	add	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e008      	b.n	8003f24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f12:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <prvInsertBlockIntoFreeList+0xb0>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e003      	b.n	8003f24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d002      	beq.n	8003f32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20012d90 	.word	0x20012d90
 8003f44:	20012d98 	.word	0x20012d98

08003f48 <__libc_init_array>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	4d0d      	ldr	r5, [pc, #52]	; (8003f80 <__libc_init_array+0x38>)
 8003f4c:	4c0d      	ldr	r4, [pc, #52]	; (8003f84 <__libc_init_array+0x3c>)
 8003f4e:	1b64      	subs	r4, r4, r5
 8003f50:	10a4      	asrs	r4, r4, #2
 8003f52:	2600      	movs	r6, #0
 8003f54:	42a6      	cmp	r6, r4
 8003f56:	d109      	bne.n	8003f6c <__libc_init_array+0x24>
 8003f58:	4d0b      	ldr	r5, [pc, #44]	; (8003f88 <__libc_init_array+0x40>)
 8003f5a:	4c0c      	ldr	r4, [pc, #48]	; (8003f8c <__libc_init_array+0x44>)
 8003f5c:	f000 f82e 	bl	8003fbc <_init>
 8003f60:	1b64      	subs	r4, r4, r5
 8003f62:	10a4      	asrs	r4, r4, #2
 8003f64:	2600      	movs	r6, #0
 8003f66:	42a6      	cmp	r6, r4
 8003f68:	d105      	bne.n	8003f76 <__libc_init_array+0x2e>
 8003f6a:	bd70      	pop	{r4, r5, r6, pc}
 8003f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f70:	4798      	blx	r3
 8003f72:	3601      	adds	r6, #1
 8003f74:	e7ee      	b.n	8003f54 <__libc_init_array+0xc>
 8003f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7a:	4798      	blx	r3
 8003f7c:	3601      	adds	r6, #1
 8003f7e:	e7f2      	b.n	8003f66 <__libc_init_array+0x1e>
 8003f80:	08004044 	.word	0x08004044
 8003f84:	08004044 	.word	0x08004044
 8003f88:	08004044 	.word	0x08004044
 8003f8c:	08004048 	.word	0x08004048

08003f90 <memcpy>:
 8003f90:	440a      	add	r2, r1
 8003f92:	4291      	cmp	r1, r2
 8003f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f98:	d100      	bne.n	8003f9c <memcpy+0xc>
 8003f9a:	4770      	bx	lr
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fa6:	4291      	cmp	r1, r2
 8003fa8:	d1f9      	bne.n	8003f9e <memcpy+0xe>
 8003faa:	bd10      	pop	{r4, pc}

08003fac <memset>:
 8003fac:	4402      	add	r2, r0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d100      	bne.n	8003fb6 <memset+0xa>
 8003fb4:	4770      	bx	lr
 8003fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fba:	e7f9      	b.n	8003fb0 <memset+0x4>

08003fbc <_init>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	bf00      	nop
 8003fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc2:	bc08      	pop	{r3}
 8003fc4:	469e      	mov	lr, r3
 8003fc6:	4770      	bx	lr

08003fc8 <_fini>:
 8003fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fca:	bf00      	nop
 8003fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fce:	bc08      	pop	{r3}
 8003fd0:	469e      	mov	lr, r3
 8003fd2:	4770      	bx	lr
