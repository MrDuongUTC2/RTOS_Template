
RTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003390  08003390  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003398  08003398  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080033a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012d90  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012da4  20012da4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7b7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b03  00000000  00000000  0002a7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000900  00000000  00000000  0002c300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000858  00000000  00000000  0002cc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021062  00000000  00000000  0002d458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae6d  00000000  00000000  0004e4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9cc0  00000000  00000000  00059327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122fe7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023a0  00000000  00000000  00123038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003330 	.word	0x08003330

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08003330 	.word	0x08003330

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 f9b7 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f827 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8ad 	bl	8000640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f881 	bl	80005ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2302      	movs	r3, #2
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <main+0x50>)
 80004f4:	22c8      	movs	r2, #200	; 0xc8
 80004f6:	490c      	ldr	r1, [pc, #48]	; (8000528 <main+0x54>)
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <main+0x58>)
 80004fa:	f001 fd31 	bl	8001f60 <xTaskCreate>
 80004fe:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d00a      	beq.n	800051c <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800050a:	f383 8811 	msr	BASEPRI, r3
 800050e:	f3bf 8f6f 	isb	sy
 8000512:	f3bf 8f4f 	dsb	sy
 8000516:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000518:	bf00      	nop
 800051a:	e7fe      	b.n	800051a <main+0x46>
  vTaskStartScheduler();
 800051c:	f001 fed0 	bl	80022c0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x4c>
 8000522:	bf00      	nop
 8000524:	08003348 	.word	0x08003348
 8000528:	08003360 	.word	0x08003360
 800052c:	08000691 	.word	0x08000691

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 feee 	bl	8003320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xb4>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xb4>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xb4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <SystemClock_Config+0xb8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <SystemClock_Config+0xb8>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SystemClock_Config+0xb8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fc33 	bl	8000e0c <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005ac:	f000 f886 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fe96 	bl	80012fc <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005d6:	f000 f871 	bl	80006bc <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_USART2_UART_Init+0x4c>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <MX_USART2_UART_Init+0x50>)
 80005f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_USART2_UART_Init+0x4c>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_USART2_UART_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_USART2_UART_Init+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_USART2_UART_Init+0x4c>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_USART2_UART_Init+0x4c>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_USART2_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_USART2_UART_Init+0x4c>)
 8000624:	f001 f84a 	bl	80016bc <HAL_UART_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800062e:	f000 f845 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000030 	.word	0x20000030
 800063c:	40004400 	.word	0x40004400

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_GPIO_Init+0x4c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <MX_GPIO_Init+0x4c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_GPIO_Init+0x4c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_GPIO_Init+0x4c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <MX_GPIO_Init+0x4c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_GPIO_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	const TickType_t xDelay = 500 / portTICK_PERIOD_MS;
 8000698:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800069c:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_UART_Transmit(&huart2, "0------", 3, 1000);
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	2203      	movs	r2, #3
 80006a4:	4903      	ldr	r1, [pc, #12]	; (80006b4 <task1_handler+0x24>)
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <task1_handler+0x28>)
 80006a8:	f001 f855 	bl	8001756 <HAL_UART_Transmit>
		vTaskDelay( xDelay );
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f001 fdd3 	bl	8002258 <vTaskDelay>
		HAL_UART_Transmit(&huart2, "0------", 3, 1000);
 80006b2:	e7f4      	b.n	800069e <task1_handler+0xe>
 80006b4:	08003368 	.word	0x08003368
 80006b8:	20000030 	.word	0x20000030

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <HAL_MspInit+0x4c>)
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x4c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <HAL_UART_MspInit+0x84>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d12b      	bne.n	8000792 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_UART_MspInit+0x88>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_UART_MspInit+0x88>)
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_UART_MspInit+0x88>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_UART_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <HAL_UART_MspInit+0x88>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_UART_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000772:	230c      	movs	r3, #12
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000782:	2307      	movs	r3, #7
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <HAL_UART_MspInit+0x8c>)
 800078e:	f000 f9a1 	bl	8000ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40004400 	.word	0x40004400
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020000 	.word	0x40020000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007fe:	490e      	ldr	r1, [pc, #56]	; (8000838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000814:	4c0b      	ldr	r4, [pc, #44]	; (8000844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000822:	f7ff ffd7 	bl	80007d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000826:	f002 fd57 	bl	80032d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082a:	f7ff fe53 	bl	80004d4 <main>
  bx  lr    
 800082e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800083c:	080033a0 	.word	0x080033a0
  ldr r2, =_sbss
 8000840:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000844:	20012da4 	.word	0x20012da4

08000848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <HAL_Init+0x40>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800085a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0a      	ldr	r2, [pc, #40]	; (800088c <HAL_Init+0x40>)
 8000862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_Init+0x40>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_Init+0x40>)
 800086e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f8f9 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	200f      	movs	r0, #15
 800087c:	f000 f808 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff ff22 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023c00 	.word	0x40023c00

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x54>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x58>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f903 	bl	8000aba <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f8d9 	bl	8000a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	; (80008ec <HAL_InitTick+0x5c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_GetTick+0x14>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000074 	.word	0x20000074

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	; (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	; (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	; 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	; 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f7ff ff8e 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff47 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff5c 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff8e 	bl	80009c0 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffb0 	bl	8000a28 <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
 8000aee:	e16b      	b.n	8000dc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000af0:	2201      	movs	r2, #1
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	f040 815a 	bne.w	8000dc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d005      	beq.n	8000b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d130      	bne.n	8000b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	091b      	lsrs	r3, r3, #4
 8000b72:	f003 0201 	and.w	r2, r3, #1
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d017      	beq.n	8000bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d123      	bne.n	8000c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3208      	adds	r2, #8
 8000bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	691a      	ldr	r2, [r3, #16]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	08da      	lsrs	r2, r3, #3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3208      	adds	r2, #8
 8000c12:	69b9      	ldr	r1, [r7, #24]
 8000c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0203 	and.w	r2, r3, #3
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 80b4 	beq.w	8000dc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b60      	ldr	r3, [pc, #384]	; (8000de0 <HAL_GPIO_Init+0x30c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a5f      	ldr	r2, [pc, #380]	; (8000de0 <HAL_GPIO_Init+0x30c>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b5d      	ldr	r3, [pc, #372]	; (8000de0 <HAL_GPIO_Init+0x30c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c76:	4a5b      	ldr	r2, [pc, #364]	; (8000de4 <HAL_GPIO_Init+0x310>)
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	220f      	movs	r2, #15
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a52      	ldr	r2, [pc, #328]	; (8000de8 <HAL_GPIO_Init+0x314>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d02b      	beq.n	8000cfa <HAL_GPIO_Init+0x226>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a51      	ldr	r2, [pc, #324]	; (8000dec <HAL_GPIO_Init+0x318>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d025      	beq.n	8000cf6 <HAL_GPIO_Init+0x222>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a50      	ldr	r2, [pc, #320]	; (8000df0 <HAL_GPIO_Init+0x31c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d01f      	beq.n	8000cf2 <HAL_GPIO_Init+0x21e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4f      	ldr	r2, [pc, #316]	; (8000df4 <HAL_GPIO_Init+0x320>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d019      	beq.n	8000cee <HAL_GPIO_Init+0x21a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a4e      	ldr	r2, [pc, #312]	; (8000df8 <HAL_GPIO_Init+0x324>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0x216>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a4d      	ldr	r2, [pc, #308]	; (8000dfc <HAL_GPIO_Init+0x328>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d00d      	beq.n	8000ce6 <HAL_GPIO_Init+0x212>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a4c      	ldr	r2, [pc, #304]	; (8000e00 <HAL_GPIO_Init+0x32c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d007      	beq.n	8000ce2 <HAL_GPIO_Init+0x20e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a4b      	ldr	r2, [pc, #300]	; (8000e04 <HAL_GPIO_Init+0x330>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d101      	bne.n	8000cde <HAL_GPIO_Init+0x20a>
 8000cda:	2307      	movs	r3, #7
 8000cdc:	e00e      	b.n	8000cfc <HAL_GPIO_Init+0x228>
 8000cde:	2308      	movs	r3, #8
 8000ce0:	e00c      	b.n	8000cfc <HAL_GPIO_Init+0x228>
 8000ce2:	2306      	movs	r3, #6
 8000ce4:	e00a      	b.n	8000cfc <HAL_GPIO_Init+0x228>
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	e008      	b.n	8000cfc <HAL_GPIO_Init+0x228>
 8000cea:	2304      	movs	r3, #4
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x228>
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e004      	b.n	8000cfc <HAL_GPIO_Init+0x228>
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	e002      	b.n	8000cfc <HAL_GPIO_Init+0x228>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <HAL_GPIO_Init+0x228>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	69fa      	ldr	r2, [r7, #28]
 8000cfe:	f002 0203 	and.w	r2, r2, #3
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	4093      	lsls	r3, r2
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d0c:	4935      	ldr	r1, [pc, #212]	; (8000de4 <HAL_GPIO_Init+0x310>)
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	3302      	adds	r3, #2
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <HAL_GPIO_Init+0x334>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d3e:	4a32      	ldr	r2, [pc, #200]	; (8000e08 <HAL_GPIO_Init+0x334>)
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d44:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <HAL_GPIO_Init+0x334>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d68:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <HAL_GPIO_Init+0x334>)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <HAL_GPIO_Init+0x334>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d92:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <HAL_GPIO_Init+0x334>)
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_GPIO_Init+0x334>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dbc:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <HAL_GPIO_Init+0x334>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	2b0f      	cmp	r3, #15
 8000dcc:	f67f ae90 	bls.w	8000af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40013800 	.word	0x40013800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40020800 	.word	0x40020800
 8000df4:	40020c00 	.word	0x40020c00
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40021400 	.word	0x40021400
 8000e00:	40021800 	.word	0x40021800
 8000e04:	40021c00 	.word	0x40021c00
 8000e08:	40013c00 	.word	0x40013c00

08000e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e267      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d075      	beq.n	8000f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e2a:	4b88      	ldr	r3, [pc, #544]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d00c      	beq.n	8000e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e36:	4b85      	ldr	r3, [pc, #532]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d112      	bne.n	8000e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e42:	4b82      	ldr	r3, [pc, #520]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e4e:	d10b      	bne.n	8000e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e50:	4b7e      	ldr	r3, [pc, #504]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d05b      	beq.n	8000f14 <HAL_RCC_OscConfig+0x108>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d157      	bne.n	8000f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e242      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e70:	d106      	bne.n	8000e80 <HAL_RCC_OscConfig+0x74>
 8000e72:	4b76      	ldr	r3, [pc, #472]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a75      	ldr	r2, [pc, #468]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e01d      	b.n	8000ebc <HAL_RCC_OscConfig+0xb0>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e88:	d10c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x98>
 8000e8a:	4b70      	ldr	r3, [pc, #448]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a6f      	ldr	r2, [pc, #444]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b6d      	ldr	r3, [pc, #436]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a6c      	ldr	r2, [pc, #432]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e00b      	b.n	8000ebc <HAL_RCC_OscConfig+0xb0>
 8000ea4:	4b69      	ldr	r3, [pc, #420]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a68      	ldr	r2, [pc, #416]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b66      	ldr	r3, [pc, #408]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a65      	ldr	r2, [pc, #404]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d013      	beq.n	8000eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fd14 	bl	80008f0 <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fd10 	bl	80008f0 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b64      	cmp	r3, #100	; 0x64
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e207      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ede:	4b5b      	ldr	r3, [pc, #364]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f0      	beq.n	8000ecc <HAL_RCC_OscConfig+0xc0>
 8000eea:	e014      	b.n	8000f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fd00 	bl	80008f0 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fcfc 	bl	80008f0 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	; 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e1f3      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f06:	4b51      	ldr	r3, [pc, #324]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0xe8>
 8000f12:	e000      	b.n	8000f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d063      	beq.n	8000fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f22:	4b4a      	ldr	r3, [pc, #296]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d11c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f3a:	4b44      	ldr	r3, [pc, #272]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d116      	bne.n	8000f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <HAL_RCC_OscConfig+0x152>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d001      	beq.n	8000f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e1c7      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4937      	ldr	r1, [pc, #220]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f72:	e03a      	b.n	8000fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d020      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7c:	4b34      	ldr	r3, [pc, #208]	; (8001050 <HAL_RCC_OscConfig+0x244>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f82:	f7ff fcb5 	bl	80008f0 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fcb1 	bl	80008f0 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e1a8      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4925      	ldr	r1, [pc, #148]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
 8000fbc:	e015      	b.n	8000fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <HAL_RCC_OscConfig+0x244>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fc94 	bl	80008f0 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fc90 	bl	80008f0 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e187      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d036      	beq.n	8001064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d016      	beq.n	800102c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_RCC_OscConfig+0x248>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001004:	f7ff fc74 	bl	80008f0 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800100c:	f7ff fc70 	bl	80008f0 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e167      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_RCC_OscConfig+0x240>)
 8001020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0x200>
 800102a:	e01b      	b.n	8001064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_RCC_OscConfig+0x248>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001032:	f7ff fc5d 	bl	80008f0 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001038:	e00e      	b.n	8001058 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103a:	f7ff fc59 	bl	80008f0 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d907      	bls.n	8001058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e150      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
 800104c:	40023800 	.word	0x40023800
 8001050:	42470000 	.word	0x42470000
 8001054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001058:	4b88      	ldr	r3, [pc, #544]	; (800127c <HAL_RCC_OscConfig+0x470>)
 800105a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1ea      	bne.n	800103a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 8097 	beq.w	80011a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001076:	4b81      	ldr	r3, [pc, #516]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10f      	bne.n	80010a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b7d      	ldr	r3, [pc, #500]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a7c      	ldr	r2, [pc, #496]	; (800127c <HAL_RCC_OscConfig+0x470>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b7a      	ldr	r3, [pc, #488]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109e:	2301      	movs	r3, #1
 80010a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a2:	4b77      	ldr	r3, [pc, #476]	; (8001280 <HAL_RCC_OscConfig+0x474>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ae:	4b74      	ldr	r3, [pc, #464]	; (8001280 <HAL_RCC_OscConfig+0x474>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a73      	ldr	r2, [pc, #460]	; (8001280 <HAL_RCC_OscConfig+0x474>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fc19 	bl	80008f0 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fc15 	bl	80008f0 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e10c      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b6a      	ldr	r3, [pc, #424]	; (8001280 <HAL_RCC_OscConfig+0x474>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x2ea>
 80010e8:	4b64      	ldr	r3, [pc, #400]	; (800127c <HAL_RCC_OscConfig+0x470>)
 80010ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ec:	4a63      	ldr	r2, [pc, #396]	; (800127c <HAL_RCC_OscConfig+0x470>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6713      	str	r3, [r2, #112]	; 0x70
 80010f4:	e01c      	b.n	8001130 <HAL_RCC_OscConfig+0x324>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x30c>
 80010fe:	4b5f      	ldr	r3, [pc, #380]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001102:	4a5e      	ldr	r2, [pc, #376]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6713      	str	r3, [r2, #112]	; 0x70
 800110a:	4b5c      	ldr	r3, [pc, #368]	; (800127c <HAL_RCC_OscConfig+0x470>)
 800110c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800110e:	4a5b      	ldr	r2, [pc, #364]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6713      	str	r3, [r2, #112]	; 0x70
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0x324>
 8001118:	4b58      	ldr	r3, [pc, #352]	; (800127c <HAL_RCC_OscConfig+0x470>)
 800111a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800111c:	4a57      	ldr	r2, [pc, #348]	; (800127c <HAL_RCC_OscConfig+0x470>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6713      	str	r3, [r2, #112]	; 0x70
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <HAL_RCC_OscConfig+0x470>)
 800112a:	f023 0304 	bic.w	r3, r3, #4
 800112e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d015      	beq.n	8001164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff fbda 	bl	80008f0 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113e:	e00a      	b.n	8001156 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001140:	f7ff fbd6 	bl	80008f0 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	f241 3288 	movw	r2, #5000	; 0x1388
 800114e:	4293      	cmp	r3, r2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e0cb      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001156:	4b49      	ldr	r3, [pc, #292]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0ee      	beq.n	8001140 <HAL_RCC_OscConfig+0x334>
 8001162:	e014      	b.n	800118e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fbc4 	bl	80008f0 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116a:	e00a      	b.n	8001182 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800116c:	f7ff fbc0 	bl	80008f0 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	f241 3288 	movw	r2, #5000	; 0x1388
 800117a:	4293      	cmp	r3, r2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e0b5      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001182:	4b3e      	ldr	r3, [pc, #248]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1ee      	bne.n	800116c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d105      	bne.n	80011a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a38      	ldr	r2, [pc, #224]	; (800127c <HAL_RCC_OscConfig+0x470>)
 800119a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80a1 	beq.w	80012ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <HAL_RCC_OscConfig+0x470>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d05c      	beq.n	8001270 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d141      	bne.n	8001242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011be:	4b31      	ldr	r3, [pc, #196]	; (8001284 <HAL_RCC_OscConfig+0x478>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fb94 	bl	80008f0 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011cc:	f7ff fb90 	bl	80008f0 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e087      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_RCC_OscConfig+0x470>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	085b      	lsrs	r3, r3, #1
 8001202:	3b01      	subs	r3, #1
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	061b      	lsls	r3, r3, #24
 800120e:	491b      	ldr	r1, [pc, #108]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_RCC_OscConfig+0x478>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fb69 	bl	80008f0 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001222:	f7ff fb65 	bl	80008f0 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e05c      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x416>
 8001240:	e054      	b.n	80012ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_RCC_OscConfig+0x478>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fb52 	bl	80008f0 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff fb4e 	bl	80008f0 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e045      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_RCC_OscConfig+0x470>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x444>
 800126e:	e03d      	b.n	80012ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e038      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
 800127c:	40023800 	.word	0x40023800
 8001280:	40007000 	.word	0x40007000
 8001284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_RCC_OscConfig+0x4ec>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d028      	beq.n	80012e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d121      	bne.n	80012e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d11a      	bne.n	80012e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012b8:	4013      	ands	r3, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d111      	bne.n	80012e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	3b01      	subs	r3, #1
 80012d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d107      	bne.n	80012e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d001      	beq.n	80012ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0cc      	b.n	80014aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d90c      	bls.n	8001338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131e:	4b65      	ldr	r3, [pc, #404]	; (80014b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0b8      	b.n	80014aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001350:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a58      	ldr	r2, [pc, #352]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800135a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	4a52      	ldr	r2, [pc, #328]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001374:	4b50      	ldr	r3, [pc, #320]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	494d      	ldr	r1, [pc, #308]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	4313      	orrs	r3, r2
 8001384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d044      	beq.n	800141c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d107      	bne.n	80013aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d119      	bne.n	80013da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e07f      	b.n	80014aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d003      	beq.n	80013ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ba:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d109      	bne.n	80013da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e06f      	b.n	80014aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e067      	b.n	80014aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f023 0203 	bic.w	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4934      	ldr	r1, [pc, #208]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013ec:	f7ff fa80 	bl	80008f0 <HAL_GetTick>
 80013f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f2:	e00a      	b.n	800140a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f4:	f7ff fa7c 	bl	80008f0 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e04f      	b.n	80014aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 020c 	and.w	r2, r3, #12
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	429a      	cmp	r2, r3
 800141a:	d1eb      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <HAL_RCC_ClockConfig+0x1b8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d20c      	bcs.n	8001444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_RCC_ClockConfig+0x1b8>)
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e032      	b.n	80014aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4916      	ldr	r1, [pc, #88]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	4313      	orrs	r3, r2
 8001460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	490e      	ldr	r1, [pc, #56]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	4313      	orrs	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001482:	f000 f821 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 8001486:	4602      	mov	r2, r0
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	5ccb      	ldrb	r3, [r1, r3]
 8001496:	fa22 f303 	lsr.w	r3, r2, r3
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_RCC_ClockConfig+0x1c8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f9f4 	bl	8000890 <HAL_InitTick>

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023c00 	.word	0x40023c00
 80014b8:	40023800 	.word	0x40023800
 80014bc:	08003378 	.word	0x08003378
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004

080014c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014cc:	b090      	sub	sp, #64	; 0x40
 80014ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
 80014d4:	2300      	movs	r3, #0
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014e0:	4b59      	ldr	r3, [pc, #356]	; (8001648 <HAL_RCC_GetSysClockFreq+0x180>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d00d      	beq.n	8001508 <HAL_RCC_GetSysClockFreq+0x40>
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	f200 80a1 	bhi.w	8001634 <HAL_RCC_GetSysClockFreq+0x16c>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <HAL_RCC_GetSysClockFreq+0x34>
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d003      	beq.n	8001502 <HAL_RCC_GetSysClockFreq+0x3a>
 80014fa:	e09b      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014fc:	4b53      	ldr	r3, [pc, #332]	; (800164c <HAL_RCC_GetSysClockFreq+0x184>)
 80014fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001500:	e09b      	b.n	800163a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001502:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_GetSysClockFreq+0x188>)
 8001504:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001506:	e098      	b.n	800163a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001508:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <HAL_RCC_GetSysClockFreq+0x180>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001512:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <HAL_RCC_GetSysClockFreq+0x180>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d028      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151e:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <HAL_RCC_GetSysClockFreq+0x180>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	099b      	lsrs	r3, r3, #6
 8001524:	2200      	movs	r2, #0
 8001526:	623b      	str	r3, [r7, #32]
 8001528:	627a      	str	r2, [r7, #36]	; 0x24
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001530:	2100      	movs	r1, #0
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_RCC_GetSysClockFreq+0x188>)
 8001534:	fb03 f201 	mul.w	r2, r3, r1
 8001538:	2300      	movs	r3, #0
 800153a:	fb00 f303 	mul.w	r3, r0, r3
 800153e:	4413      	add	r3, r2
 8001540:	4a43      	ldr	r2, [pc, #268]	; (8001650 <HAL_RCC_GetSysClockFreq+0x188>)
 8001542:	fba0 1202 	umull	r1, r2, r0, r2
 8001546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001548:	460a      	mov	r2, r1
 800154a:	62ba      	str	r2, [r7, #40]	; 0x28
 800154c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800154e:	4413      	add	r3, r2
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001554:	2200      	movs	r2, #0
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	61fa      	str	r2, [r7, #28]
 800155a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800155e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001562:	f7fe fe35 	bl	80001d0 <__aeabi_uldivmod>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4613      	mov	r3, r2
 800156c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800156e:	e053      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001570:	4b35      	ldr	r3, [pc, #212]	; (8001648 <HAL_RCC_GetSysClockFreq+0x180>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	2200      	movs	r2, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	617a      	str	r2, [r7, #20]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001582:	f04f 0b00 	mov.w	fp, #0
 8001586:	4652      	mov	r2, sl
 8001588:	465b      	mov	r3, fp
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	0159      	lsls	r1, r3, #5
 8001594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001598:	0150      	lsls	r0, r2, #5
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	ebb2 080a 	subs.w	r8, r2, sl
 80015a2:	eb63 090b 	sbc.w	r9, r3, fp
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80015b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80015b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80015ba:	ebb2 0408 	subs.w	r4, r2, r8
 80015be:	eb63 0509 	sbc.w	r5, r3, r9
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	00eb      	lsls	r3, r5, #3
 80015cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015d0:	00e2      	lsls	r2, r4, #3
 80015d2:	4614      	mov	r4, r2
 80015d4:	461d      	mov	r5, r3
 80015d6:	eb14 030a 	adds.w	r3, r4, sl
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	eb45 030b 	adc.w	r3, r5, fp
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015ee:	4629      	mov	r1, r5
 80015f0:	028b      	lsls	r3, r1, #10
 80015f2:	4621      	mov	r1, r4
 80015f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015f8:	4621      	mov	r1, r4
 80015fa:	028a      	lsls	r2, r1, #10
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001602:	2200      	movs	r2, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	60fa      	str	r2, [r7, #12]
 8001608:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800160c:	f7fe fde0 	bl	80001d0 <__aeabi_uldivmod>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4613      	mov	r3, r2
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RCC_GetSysClockFreq+0x180>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	3301      	adds	r3, #1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001628:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001632:	e002      	b.n	800163a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_RCC_GetSysClockFreq+0x184>)
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800163a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800163c:	4618      	mov	r0, r3
 800163e:	3740      	adds	r7, #64	; 0x40
 8001640:	46bd      	mov	sp, r7
 8001642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	00f42400 	.word	0x00f42400
 8001650:	017d7840 	.word	0x017d7840

08001654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_RCC_GetHCLKFreq+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000

0800166c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001670:	f7ff fff0 	bl	8001654 <HAL_RCC_GetHCLKFreq>
 8001674:	4602      	mov	r2, r0
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	0a9b      	lsrs	r3, r3, #10
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	4903      	ldr	r1, [pc, #12]	; (8001690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001682:	5ccb      	ldrb	r3, [r1, r3]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001688:	4618      	mov	r0, r3
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	08003388 	.word	0x08003388

08001694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001698:	f7ff ffdc 	bl	8001654 <HAL_RCC_GetHCLKFreq>
 800169c:	4602      	mov	r2, r0
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	0b5b      	lsrs	r3, r3, #13
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	4903      	ldr	r1, [pc, #12]	; (80016b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016aa:	5ccb      	ldrb	r3, [r1, r3]
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	08003388 	.word	0x08003388

080016bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e03f      	b.n	800174e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff f818 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2224      	movs	r2, #36	; 0x24
 80016ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f929 	bl	8001958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b08a      	sub	sp, #40	; 0x28
 800175a:	af02      	add	r7, sp, #8
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	4613      	mov	r3, r2
 8001764:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b20      	cmp	r3, #32
 8001774:	d17c      	bne.n	8001870 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_UART_Transmit+0x2c>
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e075      	b.n	8001872 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_UART_Transmit+0x3e>
 8001790:	2302      	movs	r3, #2
 8001792:	e06e      	b.n	8001872 <HAL_UART_Transmit+0x11c>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2221      	movs	r2, #33	; 0x21
 80017a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80017aa:	f7ff f8a1 	bl	80008f0 <HAL_GetTick>
 80017ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	88fa      	ldrh	r2, [r7, #6]
 80017b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	88fa      	ldrh	r2, [r7, #6]
 80017ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c4:	d108      	bne.n	80017d8 <HAL_UART_Transmit+0x82>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d104      	bne.n	80017d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	e003      	b.n	80017e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80017e8:	e02a      	b.n	8001840 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2200      	movs	r2, #0
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 f840 	bl	800187a <UART_WaitOnFlagUntilTimeout>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e036      	b.n	8001872 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10b      	bne.n	8001822 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001818:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	3302      	adds	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	e007      	b.n	8001832 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	3301      	adds	r3, #1
 8001830:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001836:	b29b      	uxth	r3, r3
 8001838:	3b01      	subs	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001844:	b29b      	uxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1cf      	bne.n	80017ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2200      	movs	r2, #0
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 f810 	bl	800187a <UART_WaitOnFlagUntilTimeout>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e006      	b.n	8001872 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2220      	movs	r2, #32
 8001868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	e000      	b.n	8001872 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001870:	2302      	movs	r3, #2
  }
}
 8001872:	4618      	mov	r0, r3
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b090      	sub	sp, #64	; 0x40
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	4613      	mov	r3, r2
 8001888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800188a:	e050      	b.n	800192e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800188c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800188e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001892:	d04c      	beq.n	800192e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <UART_WaitOnFlagUntilTimeout+0x30>
 800189a:	f7ff f829 	bl	80008f0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d241      	bcs.n	800192e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	330c      	adds	r3, #12
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b4:	e853 3f00 	ldrex	r3, [r3]
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80018c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	330c      	adds	r3, #12
 80018c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018ca:	637a      	str	r2, [r7, #52]	; 0x34
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018d2:	e841 2300 	strex	r3, r2, [r1]
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80018d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e5      	bne.n	80018aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3314      	adds	r3, #20
 80018e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	e853 3f00 	ldrex	r3, [r3]
 80018ec:	613b      	str	r3, [r7, #16]
   return(result);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3314      	adds	r3, #20
 80018fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018fe:	623a      	str	r2, [r7, #32]
 8001900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001902:	69f9      	ldr	r1, [r7, #28]
 8001904:	6a3a      	ldr	r2, [r7, #32]
 8001906:	e841 2300 	strex	r3, r2, [r1]
 800190a:	61bb      	str	r3, [r7, #24]
   return(result);
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1e5      	bne.n	80018de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2220      	movs	r2, #32
 800191e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e00f      	b.n	800194e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4013      	ands	r3, r2
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	429a      	cmp	r2, r3
 800193c:	bf0c      	ite	eq
 800193e:	2301      	moveq	r3, #1
 8001940:	2300      	movne	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	429a      	cmp	r2, r3
 800194a:	d09f      	beq.n	800188c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3740      	adds	r7, #64	; 0x40
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800195c:	b0c0      	sub	sp, #256	; 0x100
 800195e:	af00      	add	r7, sp, #0
 8001960:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001974:	68d9      	ldr	r1, [r3, #12]
 8001976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	ea40 0301 	orr.w	r3, r0, r1
 8001980:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	431a      	orrs	r2, r3
 8001990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	431a      	orrs	r2, r3
 8001998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4313      	orrs	r3, r2
 80019a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80019a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80019b0:	f021 010c 	bic.w	r1, r1, #12
 80019b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80019be:	430b      	orrs	r3, r1
 80019c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80019ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019d2:	6999      	ldr	r1, [r3, #24]
 80019d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	ea40 0301 	orr.w	r3, r0, r1
 80019de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80019e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b8f      	ldr	r3, [pc, #572]	; (8001c24 <UART_SetConfig+0x2cc>)
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d005      	beq.n	80019f8 <UART_SetConfig+0xa0>
 80019ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b8d      	ldr	r3, [pc, #564]	; (8001c28 <UART_SetConfig+0x2d0>)
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d104      	bne.n	8001a02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80019f8:	f7ff fe4c 	bl	8001694 <HAL_RCC_GetPCLK2Freq>
 80019fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001a00:	e003      	b.n	8001a0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a02:	f7ff fe33 	bl	800166c <HAL_RCC_GetPCLK1Freq>
 8001a06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a14:	f040 810c 	bne.w	8001c30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001a22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001a26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	1891      	adds	r1, r2, r2
 8001a30:	65b9      	str	r1, [r7, #88]	; 0x58
 8001a32:	415b      	adcs	r3, r3
 8001a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	eb12 0801 	adds.w	r8, r2, r1
 8001a40:	4629      	mov	r1, r5
 8001a42:	eb43 0901 	adc.w	r9, r3, r1
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a5a:	4690      	mov	r8, r2
 8001a5c:	4699      	mov	r9, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	eb18 0303 	adds.w	r3, r8, r3
 8001a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001a68:	462b      	mov	r3, r5
 8001a6a:	eb49 0303 	adc.w	r3, r9, r3
 8001a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001a7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001a82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001a86:	460b      	mov	r3, r1
 8001a88:	18db      	adds	r3, r3, r3
 8001a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	eb42 0303 	adc.w	r3, r2, r3
 8001a92:	657b      	str	r3, [r7, #84]	; 0x54
 8001a94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001a98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001a9c:	f7fe fb98 	bl	80001d0 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4b61      	ldr	r3, [pc, #388]	; (8001c2c <UART_SetConfig+0x2d4>)
 8001aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	011c      	lsls	r4, r3, #4
 8001aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ab8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001abc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ac0:	4642      	mov	r2, r8
 8001ac2:	464b      	mov	r3, r9
 8001ac4:	1891      	adds	r1, r2, r2
 8001ac6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ac8:	415b      	adcs	r3, r3
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001acc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	eb12 0a01 	adds.w	sl, r2, r1
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	eb43 0b01 	adc.w	fp, r3, r1
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ae8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001af0:	4692      	mov	sl, r2
 8001af2:	469b      	mov	fp, r3
 8001af4:	4643      	mov	r3, r8
 8001af6:	eb1a 0303 	adds.w	r3, sl, r3
 8001afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001afe:	464b      	mov	r3, r9
 8001b00:	eb4b 0303 	adc.w	r3, fp, r3
 8001b04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001b18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	18db      	adds	r3, r3, r3
 8001b20:	643b      	str	r3, [r7, #64]	; 0x40
 8001b22:	4613      	mov	r3, r2
 8001b24:	eb42 0303 	adc.w	r3, r2, r3
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
 8001b2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001b32:	f7fe fb4d 	bl	80001d0 <__aeabi_uldivmod>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <UART_SetConfig+0x2d4>)
 8001b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2264      	movs	r2, #100	; 0x64
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	1acb      	subs	r3, r1, r3
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <UART_SetConfig+0x2d4>)
 8001b54:	fba3 2302 	umull	r2, r3, r3, r2
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001b60:	441c      	add	r4, r3
 8001b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b66:	2200      	movs	r2, #0
 8001b68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001b70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001b74:	4642      	mov	r2, r8
 8001b76:	464b      	mov	r3, r9
 8001b78:	1891      	adds	r1, r2, r2
 8001b7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b7c:	415b      	adcs	r3, r3
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b84:	4641      	mov	r1, r8
 8001b86:	1851      	adds	r1, r2, r1
 8001b88:	6339      	str	r1, [r7, #48]	; 0x30
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	414b      	adcs	r3, r1
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	00cb      	lsls	r3, r1, #3
 8001ba0:	4651      	mov	r1, sl
 8001ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ba6:	4651      	mov	r1, sl
 8001ba8:	00ca      	lsls	r2, r1, #3
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	189b      	adds	r3, r3, r2
 8001bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001bb8:	464b      	mov	r3, r9
 8001bba:	460a      	mov	r2, r1
 8001bbc:	eb42 0303 	adc.w	r3, r2, r3
 8001bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001bd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001bd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001bd8:	460b      	mov	r3, r1
 8001bda:	18db      	adds	r3, r3, r3
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bde:	4613      	mov	r3, r2
 8001be0:	eb42 0303 	adc.w	r3, r2, r3
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001bee:	f7fe faef 	bl	80001d0 <__aeabi_uldivmod>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <UART_SetConfig+0x2d4>)
 8001bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	2164      	movs	r1, #100	; 0x64
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	3332      	adds	r3, #50	; 0x32
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <UART_SetConfig+0x2d4>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	f003 0207 	and.w	r2, r3, #7
 8001c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4422      	add	r2, r4
 8001c1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001c20:	e105      	b.n	8001e2e <UART_SetConfig+0x4d6>
 8001c22:	bf00      	nop
 8001c24:	40011000 	.word	0x40011000
 8001c28:	40011400 	.word	0x40011400
 8001c2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c34:	2200      	movs	r2, #0
 8001c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001c3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001c42:	4642      	mov	r2, r8
 8001c44:	464b      	mov	r3, r9
 8001c46:	1891      	adds	r1, r2, r2
 8001c48:	6239      	str	r1, [r7, #32]
 8001c4a:	415b      	adcs	r3, r3
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c52:	4641      	mov	r1, r8
 8001c54:	1854      	adds	r4, r2, r1
 8001c56:	4649      	mov	r1, r9
 8001c58:	eb43 0501 	adc.w	r5, r3, r1
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	00eb      	lsls	r3, r5, #3
 8001c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6a:	00e2      	lsls	r2, r4, #3
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	461d      	mov	r5, r3
 8001c70:	4643      	mov	r3, r8
 8001c72:	18e3      	adds	r3, r4, r3
 8001c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001c78:	464b      	mov	r3, r9
 8001c7a:	eb45 0303 	adc.w	r3, r5, r3
 8001c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	008b      	lsls	r3, r1, #2
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ca8:	4621      	mov	r1, r4
 8001caa:	008a      	lsls	r2, r1, #2
 8001cac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001cb0:	f7fe fa8e 	bl	80001d0 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <UART_SetConfig+0x4e4>)
 8001cba:	fba3 2302 	umull	r2, r3, r3, r2
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	011c      	lsls	r4, r3, #4
 8001cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ccc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001cd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001cd4:	4642      	mov	r2, r8
 8001cd6:	464b      	mov	r3, r9
 8001cd8:	1891      	adds	r1, r2, r2
 8001cda:	61b9      	str	r1, [r7, #24]
 8001cdc:	415b      	adcs	r3, r3
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce4:	4641      	mov	r1, r8
 8001ce6:	1851      	adds	r1, r2, r1
 8001ce8:	6139      	str	r1, [r7, #16]
 8001cea:	4649      	mov	r1, r9
 8001cec:	414b      	adcs	r3, r1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cfc:	4659      	mov	r1, fp
 8001cfe:	00cb      	lsls	r3, r1, #3
 8001d00:	4651      	mov	r1, sl
 8001d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d06:	4651      	mov	r1, sl
 8001d08:	00ca      	lsls	r2, r1, #3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4642      	mov	r2, r8
 8001d12:	189b      	adds	r3, r3, r2
 8001d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d18:	464b      	mov	r3, r9
 8001d1a:	460a      	mov	r2, r1
 8001d1c:	eb42 0303 	adc.w	r3, r2, r3
 8001d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	008b      	lsls	r3, r1, #2
 8001d40:	4641      	mov	r1, r8
 8001d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d46:	4641      	mov	r1, r8
 8001d48:	008a      	lsls	r2, r1, #2
 8001d4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d4e:	f7fe fa3f 	bl	80001d0 <__aeabi_uldivmod>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <UART_SetConfig+0x4e4>)
 8001d58:	fba3 1302 	umull	r1, r3, r3, r2
 8001d5c:	095b      	lsrs	r3, r3, #5
 8001d5e:	2164      	movs	r1, #100	; 0x64
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	3332      	adds	r3, #50	; 0x32
 8001d6a:	4a34      	ldr	r2, [pc, #208]	; (8001e3c <UART_SetConfig+0x4e4>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d76:	441c      	add	r4, r3
 8001d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	673b      	str	r3, [r7, #112]	; 0x70
 8001d80:	677a      	str	r2, [r7, #116]	; 0x74
 8001d82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001d86:	4642      	mov	r2, r8
 8001d88:	464b      	mov	r3, r9
 8001d8a:	1891      	adds	r1, r2, r2
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	415b      	adcs	r3, r3
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d96:	4641      	mov	r1, r8
 8001d98:	1851      	adds	r1, r2, r1
 8001d9a:	6039      	str	r1, [r7, #0]
 8001d9c:	4649      	mov	r1, r9
 8001d9e:	414b      	adcs	r3, r1
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001dae:	4659      	mov	r1, fp
 8001db0:	00cb      	lsls	r3, r1, #3
 8001db2:	4651      	mov	r1, sl
 8001db4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001db8:	4651      	mov	r1, sl
 8001dba:	00ca      	lsls	r2, r1, #3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4642      	mov	r2, r8
 8001dc4:	189b      	adds	r3, r3, r2
 8001dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dc8:	464b      	mov	r3, r9
 8001dca:	460a      	mov	r2, r1
 8001dcc:	eb42 0303 	adc.w	r3, r2, r3
 8001dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	663b      	str	r3, [r7, #96]	; 0x60
 8001ddc:	667a      	str	r2, [r7, #100]	; 0x64
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001dea:	4649      	mov	r1, r9
 8001dec:	008b      	lsls	r3, r1, #2
 8001dee:	4641      	mov	r1, r8
 8001df0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001df4:	4641      	mov	r1, r8
 8001df6:	008a      	lsls	r2, r1, #2
 8001df8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001dfc:	f7fe f9e8 	bl	80001d0 <__aeabi_uldivmod>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <UART_SetConfig+0x4e4>)
 8001e06:	fba3 1302 	umull	r1, r3, r3, r2
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2164      	movs	r1, #100	; 0x64
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	3332      	adds	r3, #50	; 0x32
 8001e18:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <UART_SetConfig+0x4e4>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4422      	add	r2, r4
 8001e2c:	609a      	str	r2, [r3, #8]
}
 8001e2e:	bf00      	nop
 8001e30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001e34:	46bd      	mov	sp, r7
 8001e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e3a:	bf00      	nop
 8001e3c:	51eb851f 	.word	0x51eb851f

08001e40 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0208 	add.w	r2, r3, #8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f103 0208 	add.w	r2, r3, #8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f103 0208 	add.w	r2, r3, #8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d103      	bne.n	8001eba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e00c      	b.n	8001ed4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3308      	adds	r3, #8
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e002      	b.n	8001ec8 <vListInsert+0x2e>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d2f6      	bcs.n	8001ec2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6892      	ldr	r2, [r2, #8]
 8001f22:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6852      	ldr	r2, [r2, #4]
 8001f2c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d103      	bne.n	8001f40 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1e5a      	subs	r2, r3, #1
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	; 0x30
 8001f64:	af04      	add	r7, sp, #16
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 ffb1 	bl	8002edc <pvPortMalloc>
 8001f7a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00e      	beq.n	8001fa0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f82:	2058      	movs	r0, #88	; 0x58
 8001f84:	f000 ffaa 	bl	8002edc <pvPortMalloc>
 8001f88:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
 8001f96:	e005      	b.n	8001fa4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8001f98:	6978      	ldr	r0, [r7, #20]
 8001f9a:	f001 f87f 	bl	800309c <vPortFree>
 8001f9e:	e001      	b.n	8001fa4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d013      	beq.n	8001fd2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	2300      	movs	r3, #0
 8001fae:	9303      	str	r3, [sp, #12]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	9302      	str	r3, [sp, #8]
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f80e 	bl	8001fe2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001fc6:	69f8      	ldr	r0, [r7, #28]
 8001fc8:	f000 f8b0 	bl	800212c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	e002      	b.n	8001fd8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
    }
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b088      	sub	sp, #32
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	21a5      	movs	r1, #165	; 0xa5
 8001ffc:	f001 f990 	bl	8003320 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800200a:	3b01      	subs	r3, #1
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f023 0307 	bic.w	r3, r3, #7
 8002018:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	617b      	str	r3, [r7, #20]
    }
 8002036:	bf00      	nop
 8002038:	e7fe      	b.n	8002038 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01f      	beq.n	8002080 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	e012      	b.n	800206c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	4413      	add	r3, r2
 800204c:	7819      	ldrb	r1, [r3, #0]
 800204e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	4413      	add	r3, r2
 8002054:	3334      	adds	r3, #52	; 0x34
 8002056:	460a      	mov	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	4413      	add	r3, r2
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3301      	adds	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	2b09      	cmp	r3, #9
 8002070:	d9e9      	bls.n	8002046 <prvInitialiseNewTask+0x64>
 8002072:	e000      	b.n	8002076 <prvInitialiseNewTask+0x94>
            {
                break;
 8002074:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800207e:	e003      	b.n	8002088 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208a:	2b04      	cmp	r3, #4
 800208c:	d90a      	bls.n	80020a4 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800208e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	613b      	str	r3, [r7, #16]
    }
 80020a0:	bf00      	nop
 80020a2:	e7fe      	b.n	80020a2 <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d901      	bls.n	80020ae <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80020aa:	2304      	movs	r3, #4
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020b8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80020ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020bc:	2200      	movs	r2, #0
 80020be:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80020c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c2:	3304      	adds	r3, #4
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fedb 	bl	8001e80 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	3318      	adds	r3, #24
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fed6 	bl	8001e80 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	f1c3 0205 	rsb	r2, r3, #5
 80020e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ec:	3350      	adds	r3, #80	; 0x50
 80020ee:	2204      	movs	r2, #4
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 f914 	bl	8003320 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	3354      	adds	r3, #84	; 0x54
 80020fc:	2201      	movs	r2, #1
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f001 f90d 	bl	8003320 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	68f9      	ldr	r1, [r7, #12]
 800210a:	69b8      	ldr	r0, [r7, #24]
 800210c:	f000 fcd2 	bl	8002ab4 <pxPortInitialiseStack>
 8002110:	4602      	mov	r2, r0
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002120:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002122:	bf00      	nop
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002134:	f000 fdf0 	bl	8002d18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002138:	4b40      	ldr	r3, [pc, #256]	; (800223c <prvAddNewTaskToReadyList+0x110>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4a3f      	ldr	r2, [pc, #252]	; (800223c <prvAddNewTaskToReadyList+0x110>)
 8002140:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002142:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <prvAddNewTaskToReadyList+0x114>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800214a:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <prvAddNewTaskToReadyList+0x114>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002150:	4b3a      	ldr	r3, [pc, #232]	; (800223c <prvAddNewTaskToReadyList+0x110>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d110      	bne.n	800217a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002158:	f000 fb92 	bl	8002880 <prvInitialiseTaskLists>
 800215c:	e00d      	b.n	800217a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800215e:	4b39      	ldr	r3, [pc, #228]	; (8002244 <prvAddNewTaskToReadyList+0x118>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <prvAddNewTaskToReadyList+0x114>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	429a      	cmp	r2, r3
 8002172:	d802      	bhi.n	800217a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002174:	4a32      	ldr	r2, [pc, #200]	; (8002240 <prvAddNewTaskToReadyList+0x114>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800217a:	4b33      	ldr	r3, [pc, #204]	; (8002248 <prvAddNewTaskToReadyList+0x11c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	4a31      	ldr	r2, [pc, #196]	; (8002248 <prvAddNewTaskToReadyList+0x11c>)
 8002182:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <prvAddNewTaskToReadyList+0x11c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	2201      	movs	r2, #1
 8002192:	409a      	lsls	r2, r3
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <prvAddNewTaskToReadyList+0x120>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4313      	orrs	r3, r2
 800219a:	4a2c      	ldr	r2, [pc, #176]	; (800224c <prvAddNewTaskToReadyList+0x120>)
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a2:	492b      	ldr	r1, [pc, #172]	; (8002250 <prvAddNewTaskToReadyList+0x124>)
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3304      	adds	r3, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	3204      	adds	r2, #4
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	1d1a      	adds	r2, r3, #4
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <prvAddNewTaskToReadyList+0x124>)
 80021e2:	441a      	add	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	615a      	str	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	4918      	ldr	r1, [pc, #96]	; (8002250 <prvAddNewTaskToReadyList+0x124>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1c59      	adds	r1, r3, #1
 80021fc:	4814      	ldr	r0, [pc, #80]	; (8002250 <prvAddNewTaskToReadyList+0x124>)
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4403      	add	r3, r0
 8002208:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800220a:	f000 fdb5 	bl	8002d78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <prvAddNewTaskToReadyList+0x118>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00e      	beq.n	8002234 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <prvAddNewTaskToReadyList+0x114>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	429a      	cmp	r2, r3
 8002222:	d207      	bcs.n	8002234 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <prvAddNewTaskToReadyList+0x128>)
 8002226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000150 	.word	0x20000150
 8002240:	20000078 	.word	0x20000078
 8002244:	2000015c 	.word	0x2000015c
 8002248:	2000016c 	.word	0x2000016c
 800224c:	20000158 	.word	0x20000158
 8002250:	2000007c 	.word	0x2000007c
 8002254:	e000ed04 	.word	0xe000ed04

08002258 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d017      	beq.n	800229a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <vTaskDelay+0x60>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <vTaskDelay+0x30>
        __asm volatile
 8002272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002276:	f383 8811 	msr	BASEPRI, r3
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	60bb      	str	r3, [r7, #8]
    }
 8002284:	bf00      	nop
 8002286:	e7fe      	b.n	8002286 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002288:	f000 f866 	bl	8002358 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800228c:	2100      	movs	r1, #0
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fb90 	bl	80029b4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002294:	f000 f86e 	bl	8002374 <xTaskResumeAll>
 8002298:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d107      	bne.n	80022b0 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <vTaskDelay+0x64>)
 80022a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000178 	.word	0x20000178
 80022bc:	e000ed04 	.word	0xe000ed04

080022c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <vTaskStartScheduler+0x7c>)
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2300      	movs	r3, #0
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2282      	movs	r2, #130	; 0x82
 80022d2:	491b      	ldr	r1, [pc, #108]	; (8002340 <vTaskStartScheduler+0x80>)
 80022d4:	481b      	ldr	r0, [pc, #108]	; (8002344 <vTaskStartScheduler+0x84>)
 80022d6:	f7ff fe43 	bl	8001f60 <xTaskCreate>
 80022da:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d116      	bne.n	8002310 <vTaskStartScheduler+0x50>
        __asm volatile
 80022e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e6:	f383 8811 	msr	BASEPRI, r3
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	60bb      	str	r3, [r7, #8]
    }
 80022f4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <vTaskStartScheduler+0x88>)
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <vTaskStartScheduler+0x8c>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <vTaskStartScheduler+0x90>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800230a:	f000 fc63 	bl	8002bd4 <xPortStartScheduler>
 800230e:	e00e      	b.n	800232e <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d10a      	bne.n	800232e <vTaskStartScheduler+0x6e>
        __asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	607b      	str	r3, [r7, #4]
    }
 800232a:	bf00      	nop
 800232c:	e7fe      	b.n	800232c <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <vTaskStartScheduler+0x94>)
 8002330:	681b      	ldr	r3, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000174 	.word	0x20000174
 8002340:	08003370 	.word	0x08003370
 8002344:	08002851 	.word	0x08002851
 8002348:	20000170 	.word	0x20000170
 800234c:	2000015c 	.word	0x2000015c
 8002350:	20000154 	.word	0x20000154
 8002354:	2000000c 	.word	0x2000000c

08002358 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <vTaskSuspendAll+0x18>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	4a03      	ldr	r2, [pc, #12]	; (8002370 <vTaskSuspendAll+0x18>)
 8002364:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	20000178 	.word	0x20000178

08002374 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002382:	4b71      	ldr	r3, [pc, #452]	; (8002548 <xTaskResumeAll+0x1d4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10a      	bne.n	80023a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238e:	f383 8811 	msr	BASEPRI, r3
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	607b      	str	r3, [r7, #4]
    }
 800239c:	bf00      	nop
 800239e:	e7fe      	b.n	800239e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80023a0:	f000 fcba 	bl	8002d18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <xTaskResumeAll+0x1d4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	4a67      	ldr	r2, [pc, #412]	; (8002548 <xTaskResumeAll+0x1d4>)
 80023ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023ae:	4b66      	ldr	r3, [pc, #408]	; (8002548 <xTaskResumeAll+0x1d4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 80c0 	bne.w	8002538 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80023b8:	4b64      	ldr	r3, [pc, #400]	; (800254c <xTaskResumeAll+0x1d8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80bb 	beq.w	8002538 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023c2:	e08a      	b.n	80024da <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023c4:	4b62      	ldr	r3, [pc, #392]	; (8002550 <xTaskResumeAll+0x1dc>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	6a12      	ldr	r2, [r2, #32]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	69d2      	ldr	r2, [r2, #28]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3318      	adds	r3, #24
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d103      	bne.n	80023fa <xTaskResumeAll+0x86>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	6a1a      	ldr	r2, [r3, #32]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	2200      	movs	r2, #0
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	68d2      	ldr	r2, [r2, #12]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	6892      	ldr	r2, [r2, #8]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	3304      	adds	r3, #4
 800242c:	429a      	cmp	r2, r3
 800242e:	d103      	bne.n	8002438 <xTaskResumeAll+0xc4>
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2200      	movs	r2, #0
 800243c:	615a      	str	r2, [r3, #20]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1e5a      	subs	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	2201      	movs	r2, #1
 800244e:	409a      	lsls	r2, r3
 8002450:	4b40      	ldr	r3, [pc, #256]	; (8002554 <xTaskResumeAll+0x1e0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4313      	orrs	r3, r2
 8002456:	4a3f      	ldr	r2, [pc, #252]	; (8002554 <xTaskResumeAll+0x1e0>)
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245e:	493e      	ldr	r1, [pc, #248]	; (8002558 <xTaskResumeAll+0x1e4>)
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	3304      	adds	r3, #4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	3204      	adds	r2, #4
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	1d1a      	adds	r2, r3, #4
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4a2e      	ldr	r2, [pc, #184]	; (8002558 <xTaskResumeAll+0x1e4>)
 800249e:	441a      	add	r2, r3
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	615a      	str	r2, [r3, #20]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a8:	492b      	ldr	r1, [pc, #172]	; (8002558 <xTaskResumeAll+0x1e4>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	1c59      	adds	r1, r3, #1
 80024b8:	4827      	ldr	r0, [pc, #156]	; (8002558 <xTaskResumeAll+0x1e4>)
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4403      	add	r3, r0
 80024c4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <xTaskResumeAll+0x1e8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d302      	bcc.n	80024da <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <xTaskResumeAll+0x1ec>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024da:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <xTaskResumeAll+0x1dc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f47f af70 	bne.w	80023c4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80024ea:	f000 fa47 	bl	800297c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <xTaskResumeAll+0x1f0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80024fa:	f000 f837 	bl	800256c <xTaskIncrementTick>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <xTaskResumeAll+0x1ec>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3b01      	subs	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f1      	bne.n	80024fa <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <xTaskResumeAll+0x1f0>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <xTaskResumeAll+0x1ec>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002524:	2301      	movs	r3, #1
 8002526:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <xTaskResumeAll+0x1f4>)
 800252a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002538:	f000 fc1e 	bl	8002d78 <vPortExitCritical>

    return xAlreadyYielded;
 800253c:	69bb      	ldr	r3, [r7, #24]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000178 	.word	0x20000178
 800254c:	20000150 	.word	0x20000150
 8002550:	20000110 	.word	0x20000110
 8002554:	20000158 	.word	0x20000158
 8002558:	2000007c 	.word	0x2000007c
 800255c:	20000078 	.word	0x20000078
 8002560:	20000164 	.word	0x20000164
 8002564:	20000160 	.word	0x20000160
 8002568:	e000ed04 	.word	0xe000ed04

0800256c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002576:	4b7d      	ldr	r3, [pc, #500]	; (800276c <xTaskIncrementTick+0x200>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 80ec 	bne.w	8002758 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002580:	4b7b      	ldr	r3, [pc, #492]	; (8002770 <xTaskIncrementTick+0x204>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3301      	adds	r3, #1
 8002586:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002588:	4a79      	ldr	r2, [pc, #484]	; (8002770 <xTaskIncrementTick+0x204>)
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d120      	bne.n	80025d6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002594:	4b77      	ldr	r3, [pc, #476]	; (8002774 <xTaskIncrementTick+0x208>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <xTaskIncrementTick+0x48>
        __asm volatile
 800259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	607b      	str	r3, [r7, #4]
    }
 80025b0:	bf00      	nop
 80025b2:	e7fe      	b.n	80025b2 <xTaskIncrementTick+0x46>
 80025b4:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <xTaskIncrementTick+0x208>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <xTaskIncrementTick+0x20c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6d      	ldr	r2, [pc, #436]	; (8002774 <xTaskIncrementTick+0x208>)
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4a6d      	ldr	r2, [pc, #436]	; (8002778 <xTaskIncrementTick+0x20c>)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b6c      	ldr	r3, [pc, #432]	; (800277c <xTaskIncrementTick+0x210>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a6b      	ldr	r2, [pc, #428]	; (800277c <xTaskIncrementTick+0x210>)
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	f000 f9d3 	bl	800297c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80025d6:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <xTaskIncrementTick+0x214>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a3a      	ldr	r2, [r7, #32]
 80025dc:	429a      	cmp	r2, r3
 80025de:	f0c0 80a6 	bcc.w	800272e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025e2:	4b64      	ldr	r3, [pc, #400]	; (8002774 <xTaskIncrementTick+0x208>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d104      	bne.n	80025f6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ec:	4b64      	ldr	r3, [pc, #400]	; (8002780 <xTaskIncrementTick+0x214>)
 80025ee:	f04f 32ff 	mov.w	r2, #4294967295
 80025f2:	601a      	str	r2, [r3, #0]
                    break;
 80025f4:	e09b      	b.n	800272e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025f6:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <xTaskIncrementTick+0x208>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002606:	6a3a      	ldr	r2, [r7, #32]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	429a      	cmp	r2, r3
 800260c:	d203      	bcs.n	8002616 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800260e:	4a5c      	ldr	r2, [pc, #368]	; (8002780 <xTaskIncrementTick+0x214>)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002614:	e08b      	b.n	800272e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	68d2      	ldr	r2, [r2, #12]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	6892      	ldr	r2, [r2, #8]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	3304      	adds	r3, #4
 8002638:	429a      	cmp	r2, r3
 800263a:	d103      	bne.n	8002644 <xTaskIncrementTick+0xd8>
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2200      	movs	r2, #0
 8002648:	615a      	str	r2, [r3, #20]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01e      	beq.n	800269a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	6a12      	ldr	r2, [r2, #32]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	69d2      	ldr	r2, [r2, #28]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	3318      	adds	r3, #24
 800267e:	429a      	cmp	r2, r3
 8002680:	d103      	bne.n	800268a <xTaskIncrementTick+0x11e>
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2200      	movs	r2, #0
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	2201      	movs	r2, #1
 80026a0:	409a      	lsls	r2, r3
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <xTaskIncrementTick+0x218>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	4a36      	ldr	r2, [pc, #216]	; (8002784 <xTaskIncrementTick+0x218>)
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b0:	4935      	ldr	r1, [pc, #212]	; (8002788 <xTaskIncrementTick+0x21c>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	3304      	adds	r3, #4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	3204      	adds	r2, #4
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	1d1a      	adds	r2, r3, #4
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4a26      	ldr	r2, [pc, #152]	; (8002788 <xTaskIncrementTick+0x21c>)
 80026f0:	441a      	add	r2, r3
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	615a      	str	r2, [r3, #20]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fa:	4923      	ldr	r1, [pc, #140]	; (8002788 <xTaskIncrementTick+0x21c>)
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	1c59      	adds	r1, r3, #1
 800270a:	481f      	ldr	r0, [pc, #124]	; (8002788 <xTaskIncrementTick+0x21c>)
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4403      	add	r3, r0
 8002716:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <xTaskIncrementTick+0x220>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	429a      	cmp	r2, r3
 8002724:	f4ff af5d 	bcc.w	80025e2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002728:	2301      	movs	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800272c:	e759      	b.n	80025e2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <xTaskIncrementTick+0x220>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002734:	4914      	ldr	r1, [pc, #80]	; (8002788 <xTaskIncrementTick+0x21c>)
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d901      	bls.n	800274a <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8002746:	2301      	movs	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <xTaskIncrementTick+0x224>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d007      	beq.n	8002762 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8002752:	2301      	movs	r3, #1
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e004      	b.n	8002762 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <xTaskIncrementTick+0x228>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <xTaskIncrementTick+0x228>)
 8002760:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002764:	4618      	mov	r0, r3
 8002766:	3728      	adds	r7, #40	; 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000178 	.word	0x20000178
 8002770:	20000154 	.word	0x20000154
 8002774:	20000108 	.word	0x20000108
 8002778:	2000010c 	.word	0x2000010c
 800277c:	20000168 	.word	0x20000168
 8002780:	20000170 	.word	0x20000170
 8002784:	20000158 	.word	0x20000158
 8002788:	2000007c 	.word	0x2000007c
 800278c:	20000078 	.word	0x20000078
 8002790:	20000164 	.word	0x20000164
 8002794:	20000160 	.word	0x20000160

08002798 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800279e:	4b27      	ldr	r3, [pc, #156]	; (800283c <vTaskSwitchContext+0xa4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <vTaskSwitchContext+0xa8>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80027ac:	e03f      	b.n	800282e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <vTaskSwitchContext+0xa8>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027b4:	4b23      	ldr	r3, [pc, #140]	; (8002844 <vTaskSwitchContext+0xac>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80027c2:	7afb      	ldrb	r3, [r7, #11]
 80027c4:	f1c3 031f 	rsb	r3, r3, #31
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	491f      	ldr	r1, [pc, #124]	; (8002848 <vTaskSwitchContext+0xb0>)
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	607b      	str	r3, [r7, #4]
    }
 80027f0:	bf00      	nop
 80027f2:	e7fe      	b.n	80027f2 <vTaskSwitchContext+0x5a>
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <vTaskSwitchContext+0xb0>)
 8002800:	4413      	add	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	3308      	adds	r3, #8
 8002816:	429a      	cmp	r2, r3
 8002818:	d104      	bne.n	8002824 <vTaskSwitchContext+0x8c>
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	4a08      	ldr	r2, [pc, #32]	; (800284c <vTaskSwitchContext+0xb4>)
 800282c:	6013      	str	r3, [r2, #0]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000178 	.word	0x20000178
 8002840:	20000164 	.word	0x20000164
 8002844:	20000158 	.word	0x20000158
 8002848:	2000007c 	.word	0x2000007c
 800284c:	20000078 	.word	0x20000078

08002850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002858:	f000 f852 	bl	8002900 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <prvIdleTask+0x28>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d9f9      	bls.n	8002858 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <prvIdleTask+0x2c>)
 8002866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002874:	e7f0      	b.n	8002858 <prvIdleTask+0x8>
 8002876:	bf00      	nop
 8002878:	2000007c 	.word	0x2000007c
 800287c:	e000ed04 	.word	0xe000ed04

08002880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	e00c      	b.n	80028a6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <prvInitialiseTaskLists+0x60>)
 8002898:	4413      	add	r3, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fad0 	bl	8001e40 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3301      	adds	r3, #1
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d9ef      	bls.n	800288c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80028ac:	480d      	ldr	r0, [pc, #52]	; (80028e4 <prvInitialiseTaskLists+0x64>)
 80028ae:	f7ff fac7 	bl	8001e40 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80028b2:	480d      	ldr	r0, [pc, #52]	; (80028e8 <prvInitialiseTaskLists+0x68>)
 80028b4:	f7ff fac4 	bl	8001e40 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80028b8:	480c      	ldr	r0, [pc, #48]	; (80028ec <prvInitialiseTaskLists+0x6c>)
 80028ba:	f7ff fac1 	bl	8001e40 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80028be:	480c      	ldr	r0, [pc, #48]	; (80028f0 <prvInitialiseTaskLists+0x70>)
 80028c0:	f7ff fabe 	bl	8001e40 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80028c4:	480b      	ldr	r0, [pc, #44]	; (80028f4 <prvInitialiseTaskLists+0x74>)
 80028c6:	f7ff fabb 	bl	8001e40 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <prvInitialiseTaskLists+0x78>)
 80028cc:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <prvInitialiseTaskLists+0x64>)
 80028ce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <prvInitialiseTaskLists+0x7c>)
 80028d2:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <prvInitialiseTaskLists+0x68>)
 80028d4:	601a      	str	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	2000007c 	.word	0x2000007c
 80028e4:	200000e0 	.word	0x200000e0
 80028e8:	200000f4 	.word	0x200000f4
 80028ec:	20000110 	.word	0x20000110
 80028f0:	20000124 	.word	0x20000124
 80028f4:	2000013c 	.word	0x2000013c
 80028f8:	20000108 	.word	0x20000108
 80028fc:	2000010c 	.word	0x2000010c

08002900 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002906:	e019      	b.n	800293c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002908:	f000 fa06 	bl	8002d18 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <prvCheckTasksWaitingTermination+0x50>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3304      	adds	r3, #4
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff faf7 	bl	8001f0c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <prvCheckTasksWaitingTermination+0x54>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3b01      	subs	r3, #1
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <prvCheckTasksWaitingTermination+0x54>)
 8002926:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <prvCheckTasksWaitingTermination+0x58>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3b01      	subs	r3, #1
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <prvCheckTasksWaitingTermination+0x58>)
 8002930:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002932:	f000 fa21 	bl	8002d78 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f810 	bl	800295c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <prvCheckTasksWaitingTermination+0x58>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e1      	bne.n	8002908 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000124 	.word	0x20000124
 8002954:	20000150 	.word	0x20000150
 8002958:	20000138 	.word	0x20000138

0800295c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fb97 	bl	800309c <vPortFree>
                vPortFree( pxTCB );
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fb94 	bl	800309c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <prvResetNextTaskUnblockTime+0x30>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d104      	bne.n	8002994 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <prvResetNextTaskUnblockTime+0x34>)
 800298c:	f04f 32ff 	mov.w	r2, #4294967295
 8002990:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002992:	e005      	b.n	80029a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <prvResetNextTaskUnblockTime+0x30>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <prvResetNextTaskUnblockTime+0x34>)
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000108 	.word	0x20000108
 80029b0:	20000170 	.word	0x20000170

080029b4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80029be:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xe4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029c4:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xe8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3304      	adds	r3, #4
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fa9e 	bl	8001f0c <uxListRemove>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xe8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2201      	movs	r2, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <prvAddCurrentTaskToDelayedList+0xec>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4013      	ands	r3, r2
 80029ea:	4a2d      	ldr	r2, [pc, #180]	; (8002aa0 <prvAddCurrentTaskToDelayedList+0xec>)
 80029ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d124      	bne.n	8002a40 <prvAddCurrentTaskToDelayedList+0x8c>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d021      	beq.n	8002a40 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	6892      	ldr	r2, [r2, #8]
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	3204      	adds	r2, #4
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	1d1a      	adds	r2, r3, #4
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002a30:	615a      	str	r2, [r3, #20]
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002a3e:	e026      	b.n	8002a8e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d209      	bcs.n	8002a6c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3304      	adds	r3, #4
 8002a62:	4619      	mov	r1, r3
 8002a64:	4610      	mov	r0, r2
 8002a66:	f7ff fa18 	bl	8001e9a <vListInsert>
}
 8002a6a:	e010      	b.n	8002a8e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <prvAddCurrentTaskToDelayedList+0xf8>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3304      	adds	r3, #4
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f7ff fa0e 	bl	8001e9a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d202      	bcs.n	8002a8e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8002a88:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6013      	str	r3, [r2, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000154 	.word	0x20000154
 8002a9c:	20000078 	.word	0x20000078
 8002aa0:	20000158 	.word	0x20000158
 8002aa4:	2000013c 	.word	0x2000013c
 8002aa8:	2000010c 	.word	0x2000010c
 8002aac:	20000108 	.word	0x20000108
 8002ab0:	20000170 	.word	0x20000170

08002ab4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3b04      	subs	r3, #4
 8002ac4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002acc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3b04      	subs	r3, #4
 8002ad2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f023 0201 	bic.w	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3b04      	subs	r3, #4
 8002ae2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002ae4:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <pxPortInitialiseStack+0x64>)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3b14      	subs	r3, #20
 8002aee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3b04      	subs	r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f06f 0202 	mvn.w	r2, #2
 8002b02:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3b20      	subs	r3, #32
 8002b08:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	08002b1d 	.word	0x08002b1d

08002b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <prvTaskExitError+0x54>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2e:	d00a      	beq.n	8002b46 <prvTaskExitError+0x2a>
        __asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	60fb      	str	r3, [r7, #12]
    }
 8002b42:	bf00      	nop
 8002b44:	e7fe      	b.n	8002b44 <prvTaskExitError+0x28>
        __asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	60bb      	str	r3, [r7, #8]
    }
 8002b58:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002b5a:	bf00      	nop
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0fc      	beq.n	8002b5c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	20000010 	.word	0x20000010
	...

08002b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <pxCurrentTCBConst2>)
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	6808      	ldr	r0, [r1, #0]
 8002b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b8a:	f380 8809 	msr	PSP, r0
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f04f 0000 	mov.w	r0, #0
 8002b96:	f380 8811 	msr	BASEPRI, r0
 8002b9a:	4770      	bx	lr
 8002b9c:	f3af 8000 	nop.w

08002ba0 <pxCurrentTCBConst2>:
 8002ba0:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop

08002ba8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ba8:	4808      	ldr	r0, [pc, #32]	; (8002bcc <prvPortStartFirstTask+0x24>)
 8002baa:	6800      	ldr	r0, [r0, #0]
 8002bac:	6800      	ldr	r0, [r0, #0]
 8002bae:	f380 8808 	msr	MSP, r0
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f380 8814 	msr	CONTROL, r0
 8002bba:	b662      	cpsie	i
 8002bbc:	b661      	cpsie	f
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	df00      	svc	0
 8002bc8:	bf00      	nop
 8002bca:	0000      	.short	0x0000
 8002bcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop

08002bd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bda:	4b46      	ldr	r3, [pc, #280]	; (8002cf4 <xPortStartScheduler+0x120>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a46      	ldr	r2, [pc, #280]	; (8002cf8 <xPortStartScheduler+0x124>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10a      	bne.n	8002bfa <xPortStartScheduler+0x26>
        __asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	613b      	str	r3, [r7, #16]
    }
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002bfa:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <xPortStartScheduler+0x120>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a3f      	ldr	r2, [pc, #252]	; (8002cfc <xPortStartScheduler+0x128>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10a      	bne.n	8002c1a <xPortStartScheduler+0x46>
        __asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60fb      	str	r3, [r7, #12]
    }
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c1a:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <xPortStartScheduler+0x12c>)
 8002c1c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	22ff      	movs	r2, #255	; 0xff
 8002c2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <xPortStartScheduler+0x130>)
 8002c40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <xPortStartScheduler+0x134>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c48:	e009      	b.n	8002c5e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <xPortStartScheduler+0x134>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	4a2d      	ldr	r2, [pc, #180]	; (8002d08 <xPortStartScheduler+0x134>)
 8002c52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b80      	cmp	r3, #128	; 0x80
 8002c68:	d0ef      	beq.n	8002c4a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <xPortStartScheduler+0x134>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d00a      	beq.n	8002c8c <xPortStartScheduler+0xb8>
        __asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	60bb      	str	r3, [r7, #8]
    }
 8002c88:	bf00      	nop
 8002c8a:	e7fe      	b.n	8002c8a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <xPortStartScheduler+0x134>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <xPortStartScheduler+0x134>)
 8002c94:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <xPortStartScheduler+0x134>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <xPortStartScheduler+0x134>)
 8002ca0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <xPortStartScheduler+0x138>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <xPortStartScheduler+0x138>)
 8002cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <xPortStartScheduler+0x138>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <xPortStartScheduler+0x138>)
 8002cbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002cc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002cc2:	f000 f8db 	bl	8002e7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <xPortStartScheduler+0x13c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002ccc:	f000 f8fa 	bl	8002ec4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <xPortStartScheduler+0x140>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <xPortStartScheduler+0x140>)
 8002cd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002cda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002cdc:	f7ff ff64 	bl	8002ba8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002ce0:	f7ff fd5a 	bl	8002798 <vTaskSwitchContext>
    prvTaskExitError();
 8002ce4:	f7ff ff1a 	bl	8002b1c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00
 8002cf8:	410fc271 	.word	0x410fc271
 8002cfc:	410fc270 	.word	0x410fc270
 8002d00:	e000e400 	.word	0xe000e400
 8002d04:	2000017c 	.word	0x2000017c
 8002d08:	20000180 	.word	0x20000180
 8002d0c:	e000ed20 	.word	0xe000ed20
 8002d10:	20000010 	.word	0x20000010
 8002d14:	e000ef34 	.word	0xe000ef34

08002d18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	607b      	str	r3, [r7, #4]
    }
 8002d30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <vPortEnterCritical+0x58>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <vPortEnterCritical+0x58>)
 8002d3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <vPortEnterCritical+0x58>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d10f      	bne.n	8002d64 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <vPortEnterCritical+0x5c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	603b      	str	r3, [r7, #0]
    }
 8002d60:	bf00      	nop
 8002d62:	e7fe      	b.n	8002d62 <vPortEnterCritical+0x4a>
    }
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	20000010 	.word	0x20000010
 8002d74:	e000ed04 	.word	0xe000ed04

08002d78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <vPortExitCritical+0x50>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <vPortExitCritical+0x24>
        __asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	607b      	str	r3, [r7, #4]
    }
 8002d98:	bf00      	nop
 8002d9a:	e7fe      	b.n	8002d9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <vPortExitCritical+0x50>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <vPortExitCritical+0x50>)
 8002da4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <vPortExitCritical+0x50>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <vPortExitCritical+0x42>
 8002dae:	2300      	movs	r3, #0
 8002db0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002db8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000010 	.word	0x20000010
 8002dcc:	00000000 	.word	0x00000000

08002dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002dd0:	f3ef 8009 	mrs	r0, PSP
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <pxCurrentTCBConst>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	f01e 0f10 	tst.w	lr, #16
 8002de0:	bf08      	it	eq
 8002de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dea:	6010      	str	r0, [r2, #0]
 8002dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002df4:	f380 8811 	msr	BASEPRI, r0
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f7ff fcca 	bl	8002798 <vTaskSwitchContext>
 8002e04:	f04f 0000 	mov.w	r0, #0
 8002e08:	f380 8811 	msr	BASEPRI, r0
 8002e0c:	bc09      	pop	{r0, r3}
 8002e0e:	6819      	ldr	r1, [r3, #0]
 8002e10:	6808      	ldr	r0, [r1, #0]
 8002e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e16:	f01e 0f10 	tst.w	lr, #16
 8002e1a:	bf08      	it	eq
 8002e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e20:	f380 8809 	msr	PSP, r0
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	f3af 8000 	nop.w

08002e30 <pxCurrentTCBConst>:
 8002e30:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop

08002e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	607b      	str	r3, [r7, #4]
    }
 8002e50:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e52:	f7ff fb8b 	bl	800256c <xTaskIncrementTick>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <SysTick_Handler+0x40>)
 8002e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	2300      	movs	r3, #0
 8002e66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f383 8811 	msr	BASEPRI, r3
    }
 8002e6e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <vPortSetupTimerInterrupt+0x34>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <vPortSetupTimerInterrupt+0x38>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <vPortSetupTimerInterrupt+0x3c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <vPortSetupTimerInterrupt+0x40>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <vPortSetupTimerInterrupt+0x44>)
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <vPortSetupTimerInterrupt+0x34>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	601a      	str	r2, [r3, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e010 	.word	0xe000e010
 8002eb4:	e000e018 	.word	0xe000e018
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	10624dd3 	.word	0x10624dd3
 8002ec0:	e000e014 	.word	0xe000e014

08002ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ed4 <vPortEnableVFP+0x10>
 8002ec8:	6801      	ldr	r1, [r0, #0]
 8002eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ece:	6001      	str	r1, [r0, #0]
 8002ed0:	4770      	bx	lr
 8002ed2:	0000      	.short	0x0000
 8002ed4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop

08002edc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002ee8:	f7ff fa36 	bl	8002358 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002eec:	4b65      	ldr	r3, [pc, #404]	; (8003084 <pvPortMalloc+0x1a8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002ef4:	f000 f934 	bl	8003160 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ef8:	4b63      	ldr	r3, [pc, #396]	; (8003088 <pvPortMalloc+0x1ac>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 80a7 	bne.w	8003054 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d02d      	beq.n	8002f68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d227      	bcs.n	8002f68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002f18:	2208      	movs	r2, #8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d021      	beq.n	8002f6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f023 0307 	bic.w	r3, r3, #7
 8002f30:	3308      	adds	r3, #8
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d214      	bcs.n	8002f62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f023 0307 	bic.w	r3, r3, #7
 8002f3e:	3308      	adds	r3, #8
 8002f40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d010      	beq.n	8002f6e <pvPortMalloc+0x92>
        __asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	617b      	str	r3, [r7, #20]
    }
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f66:	e002      	b.n	8002f6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	e000      	b.n	8002f70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d06e      	beq.n	8003054 <pvPortMalloc+0x178>
 8002f76:	4b45      	ldr	r3, [pc, #276]	; (800308c <pvPortMalloc+0x1b0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d869      	bhi.n	8003054 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f80:	4b43      	ldr	r3, [pc, #268]	; (8003090 <pvPortMalloc+0x1b4>)
 8002f82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002f84:	4b42      	ldr	r3, [pc, #264]	; (8003090 <pvPortMalloc+0x1b4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f8a:	e004      	b.n	8002f96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d903      	bls.n	8002fa8 <pvPortMalloc+0xcc>
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f1      	bne.n	8002f8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002fa8:	4b36      	ldr	r3, [pc, #216]	; (8003084 <pvPortMalloc+0x1a8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d050      	beq.n	8003054 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	4413      	add	r3, r2
 8002fba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	2308      	movs	r3, #8
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d91f      	bls.n	8003014 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <pvPortMalloc+0x120>
        __asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	613b      	str	r3, [r7, #16]
    }
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	1ad2      	subs	r2, r2, r3
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800300e:	69b8      	ldr	r0, [r7, #24]
 8003010:	f000 f908 	bl	8003224 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <pvPortMalloc+0x1b0>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <pvPortMalloc+0x1b0>)
 8003020:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <pvPortMalloc+0x1b0>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <pvPortMalloc+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d203      	bcs.n	8003036 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <pvPortMalloc+0x1b0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <pvPortMalloc+0x1b8>)
 8003034:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <pvPortMalloc+0x1ac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	431a      	orrs	r2, r3
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <pvPortMalloc+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a11      	ldr	r2, [pc, #68]	; (8003098 <pvPortMalloc+0x1bc>)
 8003052:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003054:	f7ff f98e 	bl	8002374 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <pvPortMalloc+0x19c>
        __asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	60fb      	str	r3, [r7, #12]
    }
 8003074:	bf00      	nop
 8003076:	e7fe      	b.n	8003076 <pvPortMalloc+0x19a>
    return pvReturn;
 8003078:	69fb      	ldr	r3, [r7, #28]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20012d8c 	.word	0x20012d8c
 8003088:	20012da0 	.word	0x20012da0
 800308c:	20012d90 	.word	0x20012d90
 8003090:	20012d84 	.word	0x20012d84
 8003094:	20012d94 	.word	0x20012d94
 8003098:	20012d98 	.word	0x20012d98

0800309c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d04d      	beq.n	800314a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80030ae:	2308      	movs	r3, #8
 80030b0:	425b      	negs	r3, r3
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4413      	add	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <vPortFree+0xb8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <vPortFree+0x44>
        __asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	60fb      	str	r3, [r7, #12]
    }
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <vPortFree+0x62>
        __asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	60bb      	str	r3, [r7, #8]
    }
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <vPortFree+0xb8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01e      	beq.n	800314a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11a      	bne.n	800314a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <vPortFree+0xb8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	43db      	mvns	r3, r3
 800311e:	401a      	ands	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003124:	f7ff f918 	bl	8002358 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <vPortFree+0xbc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4413      	add	r3, r2
 8003132:	4a09      	ldr	r2, [pc, #36]	; (8003158 <vPortFree+0xbc>)
 8003134:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003136:	6938      	ldr	r0, [r7, #16]
 8003138:	f000 f874 	bl	8003224 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <vPortFree+0xc0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	4a06      	ldr	r2, [pc, #24]	; (800315c <vPortFree+0xc0>)
 8003144:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003146:	f7ff f915 	bl	8002374 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20012da0 	.word	0x20012da0
 8003158:	20012d90 	.word	0x20012d90
 800315c:	20012d9c 	.word	0x20012d9c

08003160 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003166:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800316a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <prvHeapInit+0xac>)
 800316e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3307      	adds	r3, #7
 800317e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	4a1f      	ldr	r2, [pc, #124]	; (800320c <prvHeapInit+0xac>)
 8003190:	4413      	add	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003198:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <prvHeapInit+0xb0>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <prvHeapInit+0xb0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4413      	add	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80031ac:	2208      	movs	r2, #8
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0307 	bic.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a15      	ldr	r2, [pc, #84]	; (8003214 <prvHeapInit+0xb4>)
 80031c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <prvHeapInit+0xb4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <prvHeapInit+0xb4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <prvHeapInit+0xb4>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <prvHeapInit+0xb8>)
 80031ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a09      	ldr	r2, [pc, #36]	; (800321c <prvHeapInit+0xbc>)
 80031f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <prvHeapInit+0xc0>)
 80031fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	20000184 	.word	0x20000184
 8003210:	20012d84 	.word	0x20012d84
 8003214:	20012d8c 	.word	0x20012d8c
 8003218:	20012d94 	.word	0x20012d94
 800321c:	20012d90 	.word	0x20012d90
 8003220:	20012da0 	.word	0x20012da0

08003224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <prvInsertBlockIntoFreeList+0xac>)
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e002      	b.n	8003238 <prvInsertBlockIntoFreeList+0x14>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	d8f7      	bhi.n	8003232 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4413      	add	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d108      	bne.n	8003266 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	441a      	add	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	441a      	add	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d118      	bne.n	80032ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <prvInsertBlockIntoFreeList+0xb0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d00d      	beq.n	80032a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e008      	b.n	80032b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <prvInsertBlockIntoFreeList+0xb0>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e003      	b.n	80032b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d002      	beq.n	80032c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20012d84 	.word	0x20012d84
 80032d4:	20012d8c 	.word	0x20012d8c

080032d8 <__libc_init_array>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	4d0d      	ldr	r5, [pc, #52]	; (8003310 <__libc_init_array+0x38>)
 80032dc:	4c0d      	ldr	r4, [pc, #52]	; (8003314 <__libc_init_array+0x3c>)
 80032de:	1b64      	subs	r4, r4, r5
 80032e0:	10a4      	asrs	r4, r4, #2
 80032e2:	2600      	movs	r6, #0
 80032e4:	42a6      	cmp	r6, r4
 80032e6:	d109      	bne.n	80032fc <__libc_init_array+0x24>
 80032e8:	4d0b      	ldr	r5, [pc, #44]	; (8003318 <__libc_init_array+0x40>)
 80032ea:	4c0c      	ldr	r4, [pc, #48]	; (800331c <__libc_init_array+0x44>)
 80032ec:	f000 f820 	bl	8003330 <_init>
 80032f0:	1b64      	subs	r4, r4, r5
 80032f2:	10a4      	asrs	r4, r4, #2
 80032f4:	2600      	movs	r6, #0
 80032f6:	42a6      	cmp	r6, r4
 80032f8:	d105      	bne.n	8003306 <__libc_init_array+0x2e>
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003300:	4798      	blx	r3
 8003302:	3601      	adds	r6, #1
 8003304:	e7ee      	b.n	80032e4 <__libc_init_array+0xc>
 8003306:	f855 3b04 	ldr.w	r3, [r5], #4
 800330a:	4798      	blx	r3
 800330c:	3601      	adds	r6, #1
 800330e:	e7f2      	b.n	80032f6 <__libc_init_array+0x1e>
 8003310:	08003398 	.word	0x08003398
 8003314:	08003398 	.word	0x08003398
 8003318:	08003398 	.word	0x08003398
 800331c:	0800339c 	.word	0x0800339c

08003320 <memset>:
 8003320:	4402      	add	r2, r0
 8003322:	4603      	mov	r3, r0
 8003324:	4293      	cmp	r3, r2
 8003326:	d100      	bne.n	800332a <memset+0xa>
 8003328:	4770      	bx	lr
 800332a:	f803 1b01 	strb.w	r1, [r3], #1
 800332e:	e7f9      	b.n	8003324 <memset+0x4>

08003330 <_init>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	bf00      	nop
 8003334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003336:	bc08      	pop	{r3}
 8003338:	469e      	mov	lr, r3
 800333a:	4770      	bx	lr

0800333c <_fini>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	bf00      	nop
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr
